<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mKit</name>
    </assembly>
    <members>
        <member name="P:mKit.Vm2LoadingProgress.Progress">
            <summary>
            Normalized Vm2 loading progress 0..1
            </summary>
        </member>
        <member name="T:mKit.ArtificialVolume">
            <summary>
            Static class for creating artificial volumes
            </summary>
        </member>
        <member name="M:mKit.ArtificialVolume.CreateShapesOnGPU(mKit.Volume,mKit.TextureData)">
            <summary>
            Starts the Coroutine <see cref="M:mKit.ArtificialVolume.CreateShapesOnGPU_Coroutine(mKit.Volume,mKit.TextureData,System.Int32)"/>.
            </summary>
            <param name="volumeControl"></param>
            <param name="texData"></param>
        </member>
        <member name="M:mKit.ArtificialVolume.CreateShapesOnGPU_Coroutine(mKit.Volume,mKit.TextureData,System.Int32)">
            <summary>
            Creates shapes on GPU from a shape list in <see cref="P:mKit.Vm2Header.ShapeConfigList"/>.
            </summary>
            <param name="volumeControl"></param>
            <param name="texData"></param>
            <param name="volumePhase"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.ArtificialVolume.GenerateShapes(mKit.Volume,System.Boolean,System.Boolean,System.Collections.Generic.List{mKit.ShapeConfig},mKit.Vm2.FormatEnum,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Internal method for generating the shapes with the given configs.
            </summary>
            <param name="volumeCtrl">volume control instance</param>
            <param name="CreateVm2">True: to create new Vm2 data. False: to edit existing Vm2 data.</param>
            <param name="generateTexture">if false, generation of the volume texturebe must be manually started through <see cref="M:mKit.Volume.GenerateTexture"/></param>
            <param name="shapeConfigList">list of ShapeConfigs</param>
            <param name="vm_format">the format of the volume</param>
            <param name="dataDim">the dimension of the volume-data</param>
            <param name="mmDim">the real mm size of the volume-data</param>
        </member>
        <member name="M:mKit.ArtificialVolume.GenerateShapes(mKit.Vm2,System.Collections.Generic.List{mKit.ShapeConfigVoxel})">
            <summary>
            Generate artificial shapes. 
            </summary>
            <param name="vm2">target Vm2</param>
            <param name="shapeConfigList">shape config list</param>
        </member>
        <member name="M:mKit.ArtificialVolume.SetVoxel(mKit.Vm2,mKit.ShapeConfig@,UnityEngine.Vector3@,UnityEngine.Vector3Int@,UnityEngine.Color)">
            <summary>
            Convert from float position to integer position, do bounds check, apply optional noise.
            </summary>
            <param name="vm2">vm2</param>
            <param name="config">shape config</param>
            <param name="pos">float pos</param>
            <param name="dim">bounds</param>
            <param name="color">Color</param>
        </member>
        <member name="M:mKit.ArtificialVolume.CreateShape(mKit.ShapeConfig,mKit.Vm2)">
            <summary>
            Internal method to create a shape in a Vm2 
            </summary>
            <param name="config">shape config</param>
            <param name="vm2">vm2 instance</param>
        </member>
        <member name="M:mKit.ArtificialVolume.SmoothVoxelData(mKit.Vm2,System.Int32)">
            <summary>
            Smooth voxels in volume by applying a averaging filter.
            Voxels are averaged over a strength^3 subvolume.
            </summary>
            <param name="vm2">VM2 data to operate on</param>
            <param name="strength">Number of Voxels averaged in every dimension. Strength values from 1 to 3</param>
        </member>
        <member name="M:mKit.ArtificialVolume.SmoothVoxelData2(mKit.Vm2,System.Int32)">
            <summary>
            Smooth voxels in volume by applying a averaging filter.
            Each voxel is averaged over neighbour voxels (a (strength*2+1)^3 subvolume) from a data copy.
            </summary>
            <param name="vm2">VM2 data to operate on</param>
            <param name="strength">Number of Voxels averaged in every dimension. Strength value of 1 or 2</param>
        </member>
        <member name="M:mKit.ArtificialVolume.WaitForOtherGpuProcessing(mKit.Volume)">
            <summary>
            Wait until other GPU processing is finished
            </summary>
            <param name="control">instance waiting to proceed</param>
            <returns></returns>
        </member>
        <member name="T:mKit.AsyncState">
            <summary>
            Class tracking the asynchronous progress of Vm2 loading and texture generation. 
            </summary>
        </member>
        <member name="T:mKit.CameraImage">
            <summary>
            Provides a API to do one capture of the camera's render texture target.
            To capture immediately use <see cref="T:mKit.CameraImage.CapturedImage"/>.
            To capture asynchronously during Unity's OnPostRender phase, register a delegate callback with <see cref="M:mKit.CameraImage.CaptureImage(mKit.CameraImage.CapturedImage)"/>
            </summary>
        </member>
        <member name="M:mKit.CameraImage.CaptureImage(System.Boolean,System.Boolean)">
            <summary>
            Gets a rendered image from the camera attached to the same gameobject. 
            </summary>
            <param name="forceRender">force camera render in this frame</param>
            <param name="reuseTexture">recycle previously used snapshot texture instance</param>
            <returns></returns>
        </member>
        <member name="M:mKit.CameraImage.CaptureImage(System.Boolean,UnityEngine.Texture2D)">
            <summary>
            Gets a rendered image from the camera attached to the same gameobject. 
            </summary>
            <param name="forceRender">force camera render in this frame</param>
            <param name="snapshotTexture">Texture2D instance to be used (note: muste have same dimensions like source texture), cp. "<see cref="F:mKit.Config.DefaultRenderTextureWidth"/></param>
            <returns>Texture2D instance</returns>
        </member>
        <member name="M:mKit.CameraImage.CaptureImage(mKit.CameraImage.CapturedImage)">
            <summary>
            Notify to capture one image from the camere in the OnPostRender phase.
            During OnPostRender the captured image is passed as texture to the supplied callback delegate.
            </summary>
            <param name="_sendCapturedImageDelegate">callback delegate which takes the texture as argument</param>
        </member>
        <member name="T:mKit.DebugMkitEnum">
            <summary>
            Flag values (bitwise ORable) for <see cref="F:mKit.Config.DebugMkitFlags"/>.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.NONE">
            <summary>
            No debug
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.EVENTS">
            <summary>
            Debug mKitevents.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.TEXTURE">
            <summary>
            Debug texture generation.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.THREADING">
            <summary>
            Debug threading.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.MEMORY">
            <summary>
            Debug memory usage.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.INIT">
            <summary>
            Debug initialization.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.PERFORMANCE">
            <summary>
            Debug performance.
            </summary>
        </member>
        <member name="F:mKit.DebugMkitEnum.ALL">
            <summary>
            Debug all.
            </summary>
        </member>
        <member name="T:mKit.Config">
            <summary>
             Config class. Provides default values.
            </summary>
        </member>
        <member name="F:mKit.Config.mKitVersion">
            <summary>
            Mkit version (read as date: yyyymmdd)
            </summary>
        </member>
        <member name="F:mKit.Config.DebugMkitFlags">
            <summary>
            Global mKit debug flags. Default: NONE.
            </summary>
        </member>
        <member name="F:mKit.Config.UseShaderAssetBundles">
            <summary>
            If true, shaders are loaded from asset bundles.
            Default for mKit DLL: true, for development: false. 
            </summary>
        </member>
        <member name="F:mKit.Config.RequireMKitManager">
            <summary>
            Require mKit bootstrapping using MKitManager.
            </summary>
        </member>
        <member name="F:mKit.Config.UseNativeTextureUploadDX11">
            <summary>
            If true, use experimental DLL for texture upload on Windows DX11 platform.
            </summary>
        </member>
        <member name="F:mKit.Config.MetersPerUnit">
            <summary>
            Meters per Unity unit. Default: 1.
            </summary>
        </member>
        <member name="F:mKit.Config.MillimetersPerUnit">
            <summary>
            Millimeters per Unity unit. Default: 1000.
            </summary>
        </member>
        <member name="F:mKit.Config.ResourcesPath">
            <summary>
            mKit resource path. 
            </summary>
        </member>
        <member name="F:mKit.Config.VolumeMaterial">
            <summary>
            Volume material name (to be combined with platform specific suffix).
            </summary>
        </member>
        <member name="F:mKit.Config.ObliqueSliceMaterial">
            <summary>
            Oblique slice material name (to be combined with platform specific suffix).
            </summary>
        </member>
        <member name="F:mKit.Config.MaterialSuffixWindows">
            <summary>
            Material name suffix for Windows platform 
            </summary>
        </member>
        <member name="F:mKit.Config.MaterialSuffixAndroid">
            <summary>
            Material name suffix for Android platform
            </summary>
        </member>
        <member name="F:mKit.Config.MaterialSuffixIphone">
            <summary>
            Material name suffix from Iphone platform
            </summary>
        </member>
        <member name="F:mKit.Config.UltrasoundMaterial">
            <summary>
            Ultrasound material
            </summary>
        </member>
        <member name="F:mKit.Config.UseCameraDepth">
            <summary>
            If true the Unity camera's <see cref="P:UnityEngine.Camera.depthTextureMode"/> should be set to <see cref="F:UnityEngine.DepthTextureMode.Depth"/>.
            TODO: the value of this property has currently to be managed by the user.
            </summary>
        </member>
        <member name="F:mKit.Config.MaxConcurrentVolumes">
            <summary>
            Maximum concurrent volumes.
            </summary>
        </member>
        <member name="F:mKit.Config.SliceMax">
            <summary>
            Maximum slices to load from a Vm2 file.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultCompositingMode">
            <summary>
            Default volume rendering compositing mode.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultIndicatorScale">
            <summary>
            Slice orientation indicator scale.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultIndicatorPositionNormalized">
            <summary>
            Slice orientation indicator normalized position relative to slice center.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultWindowLevel">
            <summary>
            Default window level.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultWindowWidth">
            <summary>
            Default window width.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultThreshold">
            <summary>
            Default volume rendering sample intensity threshold.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultThresholdAlpha">
            <summary>
            Default volume rendering RGBA alpha value sample threshold.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultTextureMode">
            <summary>
            Default mKit volume texture type.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultVolumeTextureFilterMode">
            <summary>
            Default volume shader filter mode.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSamplerateFactor">
            <summary>
            Default normalized sample rate factor applied to standard sample rate.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultUseSurfaceNormal">
            <summary>
            Rendering option: If true, a surface normal is estimated at a voxel location.
            Currently only used for compositing mode TEXTURE1.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultPartialClipping">
            <summary>
            If true, slice clipping happens only above the slice (experimental).
            </summary>
        </member>
        <member name="F:mKit.Config.AntialiasingSlice">
            <summary>
            Default value for slice camera render target property <see cref="P:UnityEngine.RenderTexture.antiAliasing"/>.
            Cp. RenderTexture documentation. A value of 1 disables anti-aliasing.
            </summary>
        </member>
        <member name="F:mKit.Config.DrawSliceNormal">
            <summary>
            If true, the slice normal is shown.
            </summary>
        </member>
        <member name="F:mKit.Config.DrawSliceEdgesForSliceCamera">
            <summary>
            If false, slice edges appear in the 3D scene but not in the slice rendertexture.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultUseUltrasoundSliceMasking">
            <summary>
            True, if ultrasound slice mask is applied (only with <see cref="P:mKit.Volume.UseUltrasound"/> is true.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultUseSliceMasking">
            <summary>
            True, if mask texture <see cref="P:mKit.Volume.SliceMaskingTexture"/> is applied to slice.
            </summary>
        </member>
        <member name="F:mKit.Config.ForceGConExit">
            <summary>
            Call GC.Collect() and unload unused assets upon <see cref="!:ImagerCore.OnDestroy"/> / <see cref="M:mKit.Volume.ExitMKit(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.MaxLayers">
            <summary>
            Maximum available numbers of camera layers available to mKit (cp. Tags and Layer Manager in Unity)
            </summary>
        </member>
        <member name="F:mKit.Config.MaxToolgroups">
            <summary>
            Maximum toolgroups (unused)
            </summary>
        </member>
        <member name="F:mKit.Config.SliceCount">
            <summary>
            Number of slices in toolgroup (default: 3).
            </summary>
        </member>
        <member name="F:mKit.Config.SliceEdgeColorCount">
            <summary>
            4 edges + 1 normal
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceBorderColor">
            <summary>
            Default slice border color.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceIndicatorColor">
            <summary>
            Default slice orienation indicator color.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceBorderNormalizedOuterDistance">
            <summary>
            The slice border is drawn in normalized coordinates on the slice plane.
            For every edge, the distances ranges from -0.5f to +0.5f.
            The outer (a) and inner (b) distances are absolute values
            used to draw two lines, one from -a to -b, another from +b to +b.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceBorderNormalizedInnerDistance">
            <summary>
            For usage, see <see cref="F:mKit.Config.DefaultSliceBorderNormalizedOuterDistance"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.ESSBlockWidth">
            <summary>
            Voxel block width for ESS (empty space skipping) for first level ESS texture.
            Values must be a power of two, e.g. 4, 8 or 16.
            </summary>
        </member>
        <member name="F:mKit.Config.ESSLevels">
            <summary>
            ESS levels to use per volume. Each ESS level is stored in its own texture.
            Ignored if ESS is read from disk. Only first level ESS is saved to disk.
            </summary>
        </member>
        <member name="F:mKit.Config.DebugEssTexture">
            <summary>
            If true, ESS level 1 texture is used instead of volume texture.
            </summary>
        </member>
        <member name="F:mKit.Config.SliceRenderTextureDynamicResolution">
            <summary>
            This property regards the resolution of the render texture holding the slice image.
            If false, the rendertexture is quadratic, width and height equaling <see cref="F:mKit.Config.DefaultRenderTextureWidth"/>. 
            If true, the height is derived from the current aspect ratio of the slice. 
            The render texture's aspect ratio must then be matched with a properly size display area (e.g. UI.RawImage).
            Note: changing this property at runtime is reflected only after calls to <see cref="M:mKit.Volume.SetToolSize(UnityEngine.Vector2)"/>.
            Default: false
            </summary>
        </member>
        <member name="F:mKit.Config.sliceRenderTextureDepth">
            <summary>
            Depth mode for the slice render texture (for possible values, cp. <see cref="P:UnityEngine.RenderTexture.depth"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultRenderTextureWidth">
            <summary>
            Slice camera render texture width. Default: 256.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceSizeMode">
            <summary>
            Default mode for setting slice (x,y) size
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultMprOutOfDataMode">
            <summary>
            Mode for handling out-of-data pixels on slice.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultOutOfDataColor1">
            <summary>
            Color 1 for <see cref="F:mKit.MprOutOfDataMode.COLOR"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultOutOfDataColor2">
            <summary>
            Color 2 for <see cref="F:mKit.MprOutOfDataMode.COLOR"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSlabCompositing">
            <summary>
            Default compositing mode for slab slice (i.e. slices with depth/thickness).
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSlabSize">
            <summary>
            Default slab size in millimeter. Values are between 0 and <see cref="F:mKit.Config.DefaultMaxSlabSize"/>.
            Affects volume and slice when using compositing modes <see cref="F:mKit.CompositingMode.MIP"/>, <see cref="F:mKit.CompositingMode.MINIP"/> or <see cref="F:mKit.CompositingMode.AIP"/>. 
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultMinSlabSize">
            <summary>
            Default minimum value for <see cref="P:mKit.Volume.SlabThickness"/>. <seealso cref="F:mKit.Config.DefaultSlabSize"/>
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultMaxSlabSize">
            <summary>
            Default maximum value for <see cref="P:mKit.Volume.SlabThickness"/> <seealso cref="F:mKit.Config.DefaultSlabSize"/>
            </summary>
        </member>
        <member name="F:mKit.Config.RenderPerCamera">
            <summary>
            Enable for multiple camera renderings during the same Update.
            For volume-specific control, see <see cref="P:mKit.Volume.RenderPerCamera"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultIndicatorShape">
            <summary>
            Default slice orienation indicator shape.
            </summary>
        </member>
        <member name="F:mKit.Config.Vm2MaximumSize">
            <summary>
            Maximum Vm2 size (2GB for now).
            </summary>
        </member>
        <member name="F:mKit.Config.UnsubscribeEventsOnSceneUnload">
            <summary>
            True if scene unloading removes all mKit even subscribers.
            </summary>
        </member>
        <member name="F:mKit.Config.EditorUseMobileShader">
            <summary>
            True for using the Android volume+slice material in the Unity Editor on Windows. 
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceInVolume">
            <summary>
            Default state for shader optimization flag "sliceInVolume" (experimental)
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultFpsVolume4D">
            <summary>
            Default framerate for volume animation (only with 4D volumes).
            </summary>
        </member>
        <member name="F:mKit.Config.ToolCameraBelowSlice">
            <summary>
            Tool slice camera can be below (radiological setup) or above (ultrasound setup) slice.
            </summary>
        </member>
        <member name="F:mKit.Config.CollapseVolumeHierarchy">
            <summary>
            If true, the volume proxy consists of a single gameobject.
            </summary>
        </member>
        <member name="F:mKit.Config.Vm2Extension">
            <summary>
            File extension for volume data (Vm2) files.
            </summary>
        </member>
        <member name="F:mKit.Config.EssExtension">
            <summary>
            File extension for ESS data files accompanying Vm2 data files.
            </summary>
        </member>
        <member name="F:mKit.Config.CreateTexturesPOT">
            <summary>
            Power-of-two (POT) texture size default for <see cref="M:mKit.TextureData.Init(mKit.Vm2,System.Boolean)"/>
            Set to false to create non-POT (NPOT) textures.
            </summary>
        </member>
        <member name="F:mKit.Config.Default4DAnimation">
            <summary>
            Default value for animation state (only for 4D volumes).
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultUse4DTimeLerp">
            <summary>
            Default value for interpolating volume phases (only for 4D volumes). 
            </summary>
        </member>
        <member name="F:mKit.Config.TransparentVolumeDataCaching">
            <summary>
            If true, multiple loading of the same Vm2 file re-uses previously generated textures to save memory and minimize loading time.
            The feature is executed transparently during <see cref="M:mKit.Volume.AddVolume(System.String,mKit.Volume.OnVolumeReadyDelegate)"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.ROICentering">
            <summary>
            When true the volume ROI will always be at the center of the volume gameobject (cp. <see cref="P:mKit.Volume.UseROI"/>).
            </summary>
        </member>
        <member name="F:mKit.Config.TransferFunctionFloatParameterCount">
            <summary>
            Multi-purpose shader parameter count. <see cref="M:mKit.Volume.SetTransferFunctionFloatParameter(System.Int32,System.Single)"/>.
            </summary>
        </member>
        <member name="F:mKit.Config.VolumeWorldSpaceDefaultRotation">
            <summary>
            Default rotation added to volume after <see cref="P:mKit.Volume.VolumeDicomRotation"/>.
            Use a rotation from Vector3.back to Vector3.up to bring the patient into "upright" (standing) position in Unity coordinates (this is the default value). 
            </summary>
        </member>
        <member name="F:mKit.Config.VolumeWorldSpaceDefaultPosition">
            <summary>
            Default translation added to volume.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultUltrasoundScannerType">
            <summary>
            Ultrasound scanning device type.
            </summary>
        </member>
        <member name="F:mKit.Config.EnableScriptThreading">
            <summary>
            If false no threads will be used.
            </summary>
        </member>
        <member name="P:mKit.Config.MultithreadedScripting">
            <summary>
            Returns true <see cref="F:mKit.Config.EnableScriptThreading"/>is true and SystemInfo.processorCount is bigger one.
            Note that platforms like WebGL cannot use threads.
            </summary>
        </member>
        <member name="P:mKit.Config.ProcessorCount">
            <summary>
            Generate processor count value at startup, because SystemInfo.processorCount cannot be evaluated outside main thread.
            </summary>
        </member>
        <member name="F:mKit.Config.NonThreadingTextureGenerationSlicesPerFrame">
            <summary>
            Slices converted per frame during volume texture generation, if <see cref="F:mKit.Config.EnableScriptThreading"/> is false.
            </summary>
        </member>
        <member name="F:mKit.Config.DefaultSliceTransparentToBlack">
            <summary>
            For RGB volumes, the "transparent black" color (0,0,0,0) is converted to (0,0,0,1) on slice. Default: true. 
            </summary>
        </member>
        <member name="F:mKit.Config.LegacyUltrasoundCamera">
            <summary>
            For ultrasound, the slice is not observed "from below", as for the radiological setup.
            Set this property to true to let the application handle the ultrasound camera setup.
            Setting to false lets mKit handle the switching of camera setups when <see cref="P:mKit.Volume.UseUltrasound"/> is set.  
            Default: false. Note: Use "true" for legacy Sonogame.
            </summary>
        </member>
        <member name="F:mKit.Config.VolumeTextureType16Bit">
            <summary>
            Texture type For 16-bit CT/MRT data. 
            Set to <see cref="F:mKit.mKitTextureType.Type3DFloat"/> to better preserve 12-bit Hounsfield data values (experimental). 
            </summary>
        </member>
        <member name="F:mKit.Config.Volume3DFloatTextureFormat">
            <summary>
            Unity texture format for mKit texture type <see cref="F:mKit.mKitTextureType.Type3DFloat"/>.
            Possible values are RHalf or RFloat (Windows).
            </summary>
        </member>
        <member name="F:mKit.Config.Volume3DFloatRenderTextureFormat">
            <summary>
            Unity texture format for mKit texture type <see cref="F:mKit.mKitTextureType.Type3DFloat"/>.
            Possible values are RHalf or RFloat (Windows).
            </summary>
        </member>
        <member name="F:mKit.Config.WritableTexture3D">
            <summary>
            If true, Texture3D data is copied to a 3D RenterTexture on the GPU.
            </summary>
        </member>
        <member name="F:mKit.Config.UltrasoundGenerateInRenderTexture">
            <summary>
            If true, mKit calls <see cref="M:mKit.IUltrasoundRenderer.Generate(System.Int32)" /> with a RenderTexture (suitable for ComputerShader access).
            </summary>
        </member>
        <member name="F:mKit.Config.UltrasoundRenderTextureFormat">
            <summary>
            Format for the ultrasound render texture.
            </summary>
        </member>
        <member name="F:mKit.Config.UltrasoundRenderTextureColorspaceConversion">
            <summary>
            Color space conversion for the ultrasound render texture (cp. https://docs.unity3d.com/Manual/LinearLighting.html)
            </summary>
        </member>
        <member name="F:mKit.Config.UltrasoundAsyncRendering">
            <summary>
            If true, the CPU renderer is executed on a separate thread (experimental).
            </summary>
        </member>
        <member name="F:mKit.Config.UseTextureCacheAssets">
            <summary>
            Prefer 3D texture assets from folder Resources\TextureCache, if present (unique filenames necessary).
            Such assets can only be created in the Unity editor, with UnityEditor.AssetDatabase.CreateAsset(Texture3D, "filename.asset");
            </summary>
        </member>
        <member name="F:mKit.Config.TextureCacheAutogenerate">
            <summary>
            Save Texture3D to asset cache (applies only to data loaded from StreamingAssets)
            </summary>
        </member>
        <member name="F:mKit.Config.TextureCacheDirectory">
            <summary>
            3D texture cache directory. Must reside inside a special folder "Resources".
            </summary>
        </member>
        <member name="F:mKit.Config.ShapeGpuGenerationBatchesPerFrame">
            <summary>
            For shapes generated on the GPU, the workload per frame. Affects ComputerShader dispatch Z dimension.
            </summary>
        </member>
        <member name="F:mKit.Config.ShapeGpuGenerationCopyToHost">
            <summary>
            For shapes generated on the GPU, sets if volume data will not be copied to host memory.
            </summary>
        </member>
        <member name="M:mKit.Config.GetAssetBundlePlatformDir(UnityEngine.RuntimePlatform)">
            <summary>
            The subdirectory name for the mKit asset bundles.
            </summary>
            <param name="runtimePlatform"></param>
        </member>
        <member name="T:mKit.DataConverter">
            <summary>
            Data Converter singleton class for VM2 raw data. Generates an <see cref="T:mKit.TextureData"/> texture wrapper object.
            </summary>
        </member>
        <member name="M:mKit.DataConverter.#ctor(mKit.Volume)">
            <summary>
            Constructor
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="F:mKit.DataConverter.textureData">
            <summary>
            Wrapper for volume textures (3D, 4D, ESS ..)
            </summary>
        </member>
        <member name="F:mKit.DataConverter.generator">
            <summary>
            Texture3D generator class
            </summary>
        </member>
        <member name="M:mKit.DataConverter.CreateVolumeTextureAsync(mKit.TextureData)">
            <summary>
             Called through <see cref="M:mKit.Volume.SetTextureMode(mKit.mKitTextureType,System.Boolean)"/>.
            </summary>
            <param name="_vm2"></param>
            <param name="mKitTexType"></param>
            <param name="tf"></param>
            <param name="currentTex"></param>
        </member>
        <member name="M:mKit.DataConverter.MarshalData(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy Vm2 data byte-wise to a Color32 array.
            </summary>
            <param name="phase"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="sourceBytes"></param>
            <param name="sourceVolumeSize"></param>
            <param name="textureWidth"></param>
            <param name="textureHeight"></param>
            <param name="textureDepth"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.DataConverter.Coroutine_CreateTextures(mKit.TextureData)">
            <summary>
            Create volume and ESS textures.
            </summary>
            <param name="textureData">wrapper class holding generated texture objects</param>
            <returns></returns>
        </member>
        <member name="M:mKit.DataConverter.HostFormatEqualsGpuFormat(mKit.Vm2.FormatEnum,UnityEngine.TextureFormat)">
            <summary>
            Determine wheter a direct data upload to the GPU is possible. 
            </summary>
            <param name="vm2format"></param>
            <returns>true if possible </returns>
        </member>
        <member name="M:mKit.DataLoader.ReadStream(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Read bytes from <see cref="F:mKit.DataLoader.stream"/>.
            </summary>
            <param name="offset"></param>
            <param name="readSize"></param>
            <param name="bytesRead"></param>
        </member>
        <member name="T:mKit.Events.PresentationParameterEventArgs">
            <summary>
            Event arguments: parameters related to image presentation: window level, window width, threshold and transfer function.
            </summary>
        </member>
        <member name="T:mKit.Events.RenderOptionsEventArgs">
            <summary>
            Event arguments: render options.
            </summary>
        </member>
        <member name="T:mKit.Events.ToolgroupEventArgs">
            <summary>
            Event arguments: toolgroup state.
            </summary>
        </member>
        <member name="T:mKit.Events.TransformEventArgs">
            <summary>
            Event arguments: transform change.
            </summary>
        </member>
        <member name="T:mKit.Events.ViewportEventArgs">
            <summary>
            Event arguments: viewport width, height
            </summary>
        </member>
        <member name="T:mKit.Events.Vm2EventArgs">
            <summary>
            Event arguments: new Vm2 instance.
            </summary>
        </member>
        <member name="T:mKit.Events.VolumeStateEventArgs">
            <summary>
            Event arguments: volume state change.
            </summary>
        </member>
        <member name="T:mKit.Events.VolumeTextureEventArgs">
            <summary>
            Event arguments: volume texture information object.
            </summary>
        </member>
        <member name="T:mKit.Events.EventObserver">
            <summary>
            Event Observer Base Interface
            </summary>
        </member>
        <member name="M:mKit.Events.EventObserver.SetupObserver">
            <summary>
            Implement this method to subscribe to events.
            </summary>
        </member>
        <member name="T:mKit.Events.VolumeTextureObserver">
            <summary>
            Interface for classes receiving notifications for changed volume texture data.
            </summary>
        </member>
        <member name="T:mKit.Events.VolumeStateObserver">
            <summary>
            Interface with method notifying volume lifecycle events.
            </summary>
        </member>
        <member name="T:mKit.Events.WindowObserver">
            <summary>
            Interface for classes receiving notifications for changed presentation parameters like window or threshold.
            </summary>
        </member>
        <member name="T:mKit.Events.RenderOptionsObserver">
            <summary>
            Interface for classes receiving notifications for changed <see cref="T:mKit.RenderOptions"/> data.
            </summary>
        </member>
        <member name="T:mKit.Events.TransformObserver">
            <summary>
            Interface  for classes receiving notifications for transform changes.
            </summary>
        </member>
        <member name="T:mKit.Events.ToolObserver">
            <summary>
            Interface  for classes receiving notifications for changed <see cref="T:mKit.ToolgroupState"/> data.
            </summary>
        </member>
        <member name="T:mKit.Events.ViewportObserver">
            <summary>
            Interface for classes receiving notifications for changes of the viewport.
            </summary>
        </member>
        <member name="T:mKit.Events.CoreEventsObserver">
            <summary>
            This is a convenience interface which includes core interfaces built upon <see cref="T:mKit.Events.EventObserver"/>.
            </summary>
        </member>
        <member name="T:mKit.Events.Vm2Observer">
            <summary>
            Interface for classes receiving notifications regarding a new <see cref="T:mKit.Vm2" />.
            </summary>
        </member>
        <member name="T:mKit.GameObjectRelated">
            <summary>
            A lean base class for instances related to a GameObject without being derived from MonoBehaviour.
            </summary>
        </member>
        <member name="F:mKit.GameObjectRelated.gameObject">
            <summary>
            Reference to a related GameObject
            </summary>
        </member>
        <member name="P:mKit.GameObjectRelated.transform">
            <summary>
            Reference to related <see cref="F:mKit.GameObjectRelated.gameObject"/>'s transform.
            </summary>
        </member>
        <member name="T:mKit.Vm2_Color">
            <summary>
            A struct containing all possible target color values.
            </summary>
        </member>
        <member name="T:mKit.HelperLib">
            <summary>
            Library of Helper functions
            </summary>
        </member>
        <member name="M:mKit.HelperLib.GetAssetFilename(mKit.Volume,System.Boolean)">
            <summary>
            Returns a texture cache filename. Used with <see cref="F:mKit.Config.UseTextureCacheAssets"/> and <see cref="F:mKit.Config.TextureCacheAutogenerate"/>.
            Uses <see cref="M:mKit.HelperLib.FlattenPathname(System.String,System.Char)"/>. For StreamingAssets files, full path prefix is clipped.
            </summary>
            <param name="ctrl"></param>
            <param name="ess"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.FlattenPathname(System.String,System.Char)">
            <summary>
            Removes directory separator chars from a file path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.NextGauss(System.Single,System.Single,System.Single)">
            <summary>
            Generate normal distributed number with Marsaglia's "polar method".
            Algorithm source: https://en.wikipedia.org/wiki/Marsaglia_polar_method
            </summary>
            <param name="randGen">Unity PRNG</param>
            <param name="mean">center of gaussian curve</param>
            <param name="stdDev">standard deviation</param>
            <param name="width">clamp the result to to a width of # standard deviations (cp. https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule)</param>
            <returns>number in range (0,1)</returns>
        </member>
        <member name="M:mKit.HelperLib.NextRandomFromRange(System.Single)">
            <summary>
            Get a random integer in the +- range, e.g. from -2 to +2. 
            Uses <see cref="T:System.Random"/>(threadsafe)</summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.ProjectPointOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Compute signed distance point-to-plane
            </summary>
            <param name="planeNormal"></param>
            <param name="planePoint"></param>
            <param name="point"></param>
            <param name="normalIsUnitVector"></param>
            <returns>projected point</returns>
        </member>
        <member name="M:mKit.HelperLib.IsPointInsideConvexPolygon(UnityEngine.Vector2,UnityEngine.Vector2[])">
            <summary>
            Determine wheter a 2D point is inside a convex polygon suppliedc as vertex path. 
            Uses <see cref="M:mKit.HelperLib.IsPointOnRightOfLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)"/>.
            Source: http://paulbourke.net/geometry/polygonmesh/#insidepoly (Solution 3)
            </summary>
            <param name="point">2d point</param>
            <param name="vertex">vertices in order of a path</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.IsPointOnRightOfLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Determine wheter a 2D point is "on the right" of a line segment.
            Source: http://paulbourke.net/geometry/polygonmesh/#insidepoly (Solution 3)
            </summary>
            <param name="point"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.GetLayerMaskSafe(System.String[])">
            <summary>
            Get fail-safe Unity layer mask. Returns Int32.MaxValue for invalid layers.
            </summary>
            <param name="layerNames"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.GetLayerIndexSafe(System.String)">
            <summary>
            Get fail-safe Unity layer index. Returns 0 (default layer) for undefined layers. 
            </summary>
            <param name="layerNames"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.CheckProjectLayerSetup">
            <summary>
            Check mKit layer setup. Volume n is set on layer "Volume"+n, slices on "Volume"+n+"Slices".
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:mKit.HelperLib.IsSubscribed(System.String,System.MulticastDelegate,System.Delegate)">
            <summary>
            Check the delegate invocation list if the delegagte method is already subscribed to the handler.
            For debugging some ouput including handlerName is generated if <see cref="F:mKit.Config.DebugMkitFlags" /> contains <see cref="F:mKit.DebugMkitEnum.EVENTS"/>.
            </summary>
            <param name="handlerName">handler string used for debug output</param>
            <param name="theEvent">handler</param>
            <param name="delegate">delegate to be checked</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.CreatePrimitive(mKit.IndicatorShapeEnum)">
            <summary>
            Creates a Unity primitive object.
            </summary>
            <param name="shape">shape</param>
            <returns>gameobject with MeshRenderer componenent</returns>
        </member>
        <member name="M:mKit.HelperLib.GetRTPixels(UnityEngine.RenderTexture,UnityEngine.Texture2D)">
            <summary>
            Get RenderTexure data.
            original source: http://docs.unity3d.com/530/Documentation/ScriptReference/RenderTexture-active.html
            </summary>
            <param name="rt">source RenderTexture</param>
            <param name="tex">destination texture</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.GetMatrixRotation(UnityEngine.Matrix4x4,System.Boolean)">
            <summary>
            Extracts the 3x3 rotation part from a 4x4 matrix and converts it to a quaternion. 
            </summary>
            <param name="TransformMatrix">a matrix from Unity's coordinate system</param>
            <param name="flipToRightHanded">true: treat the matrix as being from a right-handed coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.IsFilenameValid(System.String)">
            <summary>
            Return false if the filename contains invalid characters.
            </summary>
            <param name="filename"></param>
            <returns>false for invalid filenames</returns>
        </member>
        <member name="M:mKit.HelperLib.IsVm2FilenameValid(System.String)">
            <summary>
            Return false if the filename does not pass <see cref="M:mKit.HelperLib.IsFilenameValid(System.String)"/> or does not end with <see cref="F:mKit.Config.Vm2Extension"/>.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.CheckVm2Filename(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check if Vm2 filename is valid. Checks extension.
            Note: as some platforms do not support file existence check(e.g. Android for StreamingAssets paths), 
            the parameters requireExists/preventExists may not report errors in that case.
            </summary>
            <param name="filename"></param>
            <param name="requireExists">optionally check if file exists</param>
            <param name="logError">optional log error to console</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.Get_Z_ReflectionMatrix">
            <summary>
            Creates a reflection matrix which flips the z axis (changing handedness).
            </summary>
            <returns>z inverting matrix</returns>
        </member>
        <member name="M:mKit.HelperLib.Vec3Str(UnityEngine.Vector3,System.String)">
            <summary>
            Converts a Vector3 to a string using a supplied float string format.
            </summary>
            <param name="v"></param>
            <param name="format">a C# string format suitable for float values, e.g. "F2".</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.LogSystemInfo">
            <summary>
            Logs all information from Unity's SystemInfo class.
            </summary>
        </member>
        <member name="M:mKit.HelperLib.DebugStopApplication(System.String)">
            <summary>
            If called in Unity Editor, generate an exception and leave play mode
            </summary>
            <param name="debugMessage">exception message</param>
        </member>
        <member name="M:mKit.HelperLib.PlatformSupportsFileExists(System.String)">
            <summary>
            Some platform's file URI cannot be checked for existens (e.g. Android StreamingAssets)
            </summary>
            <param name="path">file URI</param>
            <returns></returns>
        </member>
        <member name="P:mKit.HelperLib.StreamingAssetsPath">
            <summary>
            URI of the Unity StreamingAssets folder with trailing path seperator.
            See: http://docs.unity3d.com/Manual/StreamingAssets.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.ConvertVoxelmanLabelValue(System.UInt16)">
            <summary>
            Maps a 16-bit value from VoxelMan objectlist.txt to a 8-bit value 
            </summary>
            <param name="inValue"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.GetVoxelManLabel(System.Int32)">
            <summary>
            Get VoxelMan label text.
            </summary>
            <param name="objectIndex">index 0 to 203</param>
            <returns></returns>
        </member>
        <member name="M:mKit.HelperLib.GetVoxelManLabelArray">
            <summary>
            VoxelMan object names from objectlist.txt.
            </summary>
            <returns>string array with 204 entries.</returns>
        </member>
        <member name="T:mKit.ImagerCore">
            <summary>
            The legacy ImagerCore bootstrap class loading shaders.
            </summary>
        </member>
        <member name="M:mKit.ImagerCore.Awake">
            <summary>
            Unity Awake message
            </summary>
        </member>
        <member name="T:mKit.ImApplicationComponent">
            <summary>
            Monobehaviours which are dependend upon mKit initialization should implement this interface.
            </summary>
        </member>
        <member name="M:mKit.ImApplicationComponent.mAppComponentStart">
            <summary>
            Called after mKit initialization
            </summary>
        </member>
        <member name="T:mKit.IUltrasoundRenderer">
            <summary>
            Implementations can be assigned to <see cref="P:mKit.Volume.UltrasoundRenderer" />.
            </summary>
        </member>
        <member name="M:mKit.IUltrasoundRenderer.Init(mKit.Volume)">
            <summary>
            Init US renderer with a volume instance.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="P:mKit.IUltrasoundRenderer.IsReady">
            <summary>
            Is the US renderer ready.
            </summary>
        </member>
        <member name="M:mKit.IUltrasoundRenderer.Generate(System.Int32)">
            <summary>
            Generate US texture.
            </summary>
            <param name="index">toolgroup slice index</param>
        </member>
        <member name="M:mKit.IUltrasoundRenderer.SetDefaultThreshold(mKit.VolumeTypeEnum)">
            <summary>
            Set default shadowing threshold for given volume type.
            </summary>
            <param name="volumeType"></param>
            <returns>default threshold</returns>
        </member>
        <member name="P:mKit.IUltrasoundRenderer.ShadowThreshold">
            <summary>
            Get/set the voxel intensity (0..255 for 8-bit CT or RGB data) threshold above which shadowing occurs.
            </summary>
        </member>
        <member name="M:mKit.IUltrasoundRenderer.SetSectorParameters(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set parameters configuring the shape of the sector
            </summary>
        </member>
        <member name="M:mKit.Import.NativeMethods.LibD2V_acquireDirectory(System.String)">
            marshal manually, Marshal.AllocHGlobal / Marshal.StringToHGlobalUni
        </member>
        <member name="M:mKit.Import.NativeMethods.LibD2V_getVm2Filename(System.Int32,System.Int32)">
            marshal manually
        </member>
        <member name="M:mKit.Import.Dicom2VolumePluginView.getConverterState">
            <summary>
            Gets a converter state number from the LibD2V DLL.
            </summary>
            <returns>dllState enum</returns>
        </member>
        <member name="M:mKit.Import.Dicom2VolumePluginView.getImportError">
            <summary>
            Gets an error string from the LibD2V DLL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Import.Dicom2VolumePluginView.GetVm2Filename(System.Int32,System.Int32)">
            <summary>
            Get the Vm2 filename of list index #no
            </summary>
            <param name="no">the vm2 list index</param>
            <param name="overrideVoxelBytes">0: source data bits, 1: 8Bit, 2:16Bit</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Import.Dicom2VolumePluginView.GetVm2DisplayName(System.Int32,System.Int32)">
            <summary>
            Get a short version of the Vm2 filename
            </summary>
            <param name="no">the vm2 list index</param>
            <param name="overrideVoxelBytes">0: source data bits, 1: 8Bit, 2:16Bit</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Import.Dicom2VolumePluginView.SetFilesList(System.Collections.Generic.List{System.String})">
            <summary>
            Sends a filename list to the DLL.
            </summary>
            <param name="files">filenames</param>
        </member>
        <member name="M:mKit.Import.Dicom2VolumePluginView.writeVm2File(System.Int32,System.Int32)">
            <summary>
            Write Vm2 data to disk. The file is only written if it didn't exist before.
            </summary>
            <param name="no">the vm2 list index</param>
            <param name="overrideBytes">0: source data bits, 1: 8Bit, 2:16Bi</param>
        </member>
        <member name="T:mKit.Helper.FileDialogDelegate">
            <summary>
            delegate called to display dialog
            </summary>
            <param name="dialogWidth">dialog width</param>
            <param name="dialogHeight">dialog height</param>
            <param name="fileExt">file filter wildcard</param>
            <param name="location">file path</param>
            <param name="directoryScroll"></param>
            <param name="fileScroll"></param>
            <param name="what">what can the user select in dialog (file, directory or both)</param>
            <returns>dialog state</returns>
        </member>
        <member name="T:mKit.Helper.FileDialogSubmitDelegate">
            <summary>
            Delegate called when user chose file path in dialog
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:mKit.Helper.FileDialog">
            <summary>
            Base class for file dialogs from external library.
            </summary>
        </member>
        <member name="M:mKit.Helper.FileDialog.SetStartLocation(System.String)">
            <summary>
            Set initial path for dialog.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:mKit.Helper.FileDialog.SetFileFilter(System.String)">
            <summary>
            Set a filename extension as filter.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="P:mKit.Helper.FileDialog.FileDialogMethod">
            <summary>
            Configured method for showing dialog
            </summary>
        </member>
        <member name="P:mKit.Helper.FileDialog.FileDialogSubmitMethod">
            <summary>
            Configured method for submitting dialog
            </summary>
        </member>
        <member name="M:mKit.Helper.FileDialog.ShowFileOpenDialog(mKit.Helper.FileDialogSubmitType)">
            <summary>
            Show dialog with specified possible submit-type (file, directory, both).
            </summary>
            <param name="submitWhat">submit-type</param>
        </member>
        <member name="T:mKit.Helper.SliceOutline">
            <summary>
            Draw slice outlines via GL. See http://docs.unity3d.com/ScriptReference/GL.html
            The mesh geometry is expected to be a XZ plane with normals facing up (+Y).
            Honors <see cref="F:mKit.Config.DrawSliceNormal"/> for XZ planes, otherwise ignored. 
            
            Ultrasound:
            With scanner type <see cref="F:mKit.UltrasoundScannerTypeEnum.CURVED"/> (or sector) non-retangular outlines
            must be drawn (not implemented yet). Cp. <see cref="!:Volume.UltrasoundEdgePosition" />.
            </summary>
        </member>
        <member name="M:mKit.Helper.SliceOutline.DrawLines(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws lines around slice in normalized coordinates. 
            </summary>
            <param name="outerDist"></param>
            <param name="innerDist"></param>
            <param name="step"></param>
            <param name="stepDistance"></param>
            <param name="layer"></param>
        </member>
        <member name="T:mKit.Helper.TrackVolume">
            <summary>
            Setup Camera respective to volume extent. This script must be attached to a camera.
            The setup is done upon a Vm2 notify event (new Vm2 data present).
            The FOV of the camera can be adjusted through public float HeightFactor.
            For continuous FOV update set public float ContinuousUpdate to true. 
            </summary>
        </member>
        <member name="M:mKit.Helper.TrackVolume.DataNotify(mKit.Volume,mKit.Events.Vm2EventArgs)">
            <summary>
            Vm2 notify event.
            </summary>
            <param name="_vm2"></param>
        </member>
        <member name="T:mKit.Helper.UnityMatrixRotation">
            <summary>
            Testklasse für die Konversion: Matrix4x4 -> Rotations-Quaternion
            </summary>
        </member>
        <member name="T:mKit.Helper.Vm2RGB555">
            <summary>
            Encode/Decode ushort to RGB555
            </summary>
        </member>
        <member name="M:mKit.Helper.Vm2RGB555.encodeNormalized(System.Single,System.Single,System.Single)">
            <summary>
            Encode from normalized RGB channel values (range 0..1). 
            </summary>
            <param name="r">red</param>
            <param name="g">green</param>
            <param name="b">blue</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Helper.Vm2RGB555.encode8bit(System.Byte,System.Byte,System.Byte)">
            <summary>
            Encode from 8-bit RGB channel values (range 0..255).
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Helper.Vm2RGB555.decodeToRGBA32(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Decode to byte array. Alpha is set to 255.
            </summary>
            <param name="short_value"></param>
            <param name="destArray"></param>
            <param name="offset"></param>
        </member>
        <member name="M:mKit.Helper.Vm2RGB555.decode(System.Byte,System.Byte)">
            <summary>
            Decode from low and high byte from usigned short.
            </summary>
            <param name="lowByte"></param>
            <param name="highByte"></param>
            <returns></returns>
        </member>
        <member name="T:mKit.Helper.Vm2RGBA4444">
            <summary>
            Encode/Decode ushort to 16-bit RGBA4444
            </summary>
        </member>
        <member name="M:mKit.Helper.Vm2RGBA4444.encode(UnityEngine.Color32@)">
            <summary>
            Encode from Color32
            </summary>
            <param name="c32"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Helper.Vm2RGBA4444.decode(System.Byte,System.Byte,UnityEngine.Color32@)">
            <summary>
            Decode from low and high byte from usigned short.
            </summary>
            <param name="lowByte"></param>
            <param name="highByte"></param>
            <returns></returns>
        </member>
        <member name="T:mKit.XmlTool">
            <summary>
            XML import/export utility class. For export, set <see cref="F:mKit.XmlTool.DefaultExportEncoding"/> as needed (default: UTF8).
            </summary>
        </member>
        <member name="F:mKit.XmlTool.DefaultExportEncoding">
            <summary>
            Default encoding used by <see cref="M:mKit.XmlTool.ExportToXml``1(System.String,``0,System.Text.Encoding)"/>.
            </summary>
        </member>
        <member name="M:mKit.XmlTool.ImportFromXml``1(System.String)">
            <summary>
            Import XML file and filling an object of type T.
            Returns T instance, or null, if the file cannot be deserialized.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlPath">XML file</param>
            <returns>instance of T or null</returns>
        </member>
        <member name="M:mKit.XmlTool.ImportFromXml``1(UnityEngine.TextAsset)">
            <summary>
            Import Xml from Unity TextAsset filling an object of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textAsset"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.XmlTool.ExportToXml``1(System.String,``0,System.Text.Encoding)">
            <summary>
            Export an instance of type T to Xml file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlPath">xml file</param>
            <param name="data">instance</param>
            <param name="encoding">xml file encoding</param>
        </member>
        <member name="T:mKit.MKitManager">
            <summary>
            The MKitManager loads materials and shaders from the mKit AssetBundles.
            </summary>
        </member>
        <member name="F:mKit.MKitManager.useAssetBundles">
            <summary>
            If true, shaders are loaded from asset bundles.
            Default for mKit DLL: true, for development: false. 
            </summary>
        </member>
        <member name="F:mKit.MKitManager.dontDestroy">
            <summary>
            Sets the DonDestroy property of the MKitManager gameobject.
            </summary>
        </member>
        <member name="F:mKit.MKitManager.loadAssetbundlesFromResources">
            <summary>
            Load assetbundles from resources [new]
            </summary>
        </member>
        <member name="F:mKit.MKitManager.shaderAssetbundle">
            <summary>
            Platform-specific shaders and materials
            </summary>
        </member>
        <member name="F:mKit.MKitManager.sharedAssetbundle">
            <summary>
            Platform-independent  shaders and materials
            </summary>
        </member>
        <member name="F:mKit.MKitManager.materials">
            <summary>
            Materials cache
            </summary>
        </member>
        <member name="F:mKit.MKitManager.shader">
            <summary>
            Shader cache
            </summary>
        </member>
        <member name="F:mKit.MKitManager.computeShader">
            <summary>
            Compute shader cache
            </summary>
        </member>
        <member name="F:mKit.MKitManager.assetBundleLoaded">
            <summary>
            Asstebundle loaded state
            </summary>
        </member>
        <member name="F:mKit.MKitManager.requireMKitManager">
            <summary>
            Note: this is for legacy subclass <see cref="T:mKit.ImagerCore"/>, which sets this member to false.
            </summary>
        </member>
        <member name="M:mKit.MKitManager.Awake">
            <summary>
            Unity Awake message
            </summary>
        </member>
        <member name="M:mKit.MKitManager.Start">
            <summary>
            Unity start message
            </summary>
        </member>
        <member name="P:mKit.MKitManager.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="P:mKit.MKitManager.AssetBundleLoaded">
            <summary>
            Returns true if asset bundles was succesfully loaded.
            </summary>
        </member>
        <member name="M:mKit.MKitManager.LoadAssetbundlesFromResources">
            <summary>
            Loads assetbundles
            </summary>
        </member>
        <member name="M:mKit.MKitManager.LoadAssetbundlesFromStreamingAssets">
            <summary>
            Coroutine loading asset bundles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.MKitManager.GetTextureFormat8Bit">
            <summary>
            Returns the platform-specific texture format for 8-bit single channel data. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.MKitManager.GetComputeShader(System.String)">
            <summary>
            Get a mKit compute shader.
            </summary>
            <param name="assetName"></param>
            <returns>ComputeShader</returns>
        </member>
        <member name="M:mKit.MKitManager.GetShader(System.String)">
            <summary>
            Get a shader.
            </summary>
            <param name="assetName">asset name</param>
            <returns>shader instance </returns>
        </member>
        <member name="M:mKit.MKitManager.GetMaterial(System.String)">
            <summary>
            Get a mKit Material instance.
            </summary>
            <param name="assetName">asset name</param>
            <returns>material instance </returns>
        </member>
        <member name="M:mKit.MKitManager.GetPlatformMaterial(System.String)">
            <summary>
            Get a mKit Material instance for the current platform.
            In the Unity Editor and when building for the Android platform the Android shader is used if <see cref="F:mKit.Config.EditorUseMobileShader"/> is set to true. 
            </summary>
            /// <param name="assetName">asset name</param>
            <returns>Material instance</returns>
        </member>
        <member name="T:mKit.MultiVolumeSliceRenderer">
            <summary>
            Add MPR layers for all active volumes to single slice rendertexture. 
            </summary>
        </member>
        <member name="T:mKit.ObliqueSliceConfig">
            <summary>
            Configuration class for one slice in a toolgroup.
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.eulerAngles">
            <summary>
            Angles initilization for one slice in a toolgroup.
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.active">
            <summary>
            Initial active state.
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.thickness">
            <summary>
            Slab thickness
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.position">
            <summary>
            Initial relative position.
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.rotation">
            <summary>
            Initial rotation.
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.nearPlane">
            <summary>
            The nearPlane distance
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.farPlane">
            <summary>
            The farPlane distance
            </summary>
        </member>
        <member name="F:mKit.ObliqueSliceConfig.show3DIndicators">
            <summary>
            Flag for rendering the 3D-Indicators in the osCam
            </summary>
        </member>
        <member name="M:mKit.ObliqueSliceConfig.#ctor(System.Int32,mKit.SliceCameraOrientationEnum)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:mKit.ObliqueSliceConfig.Set(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Set position/rotation. Generates the Matrix for the GPU shader.
            </summary>
            <param name="_position"></param>
            <param name="_rotation"></param>
        </member>
        <member name="T:mKit.OsGroup">
            <summary>
            Object group representing a single oblique slice setup.
            </summary>
        </member>
        <member name="F:mKit.OsGroup.osConfig">
            <summary>
            Config of this oblique slice
            </summary>
        </member>
        <member name="F:mKit.OsGroup.osQuad">
            <summary>
            Reference to quad proxy geometry.
            </summary>
        </member>
        <member name="F:mKit.OsGroup.osRenderer">
            <summary>
            Reference to mesh renderer
            </summary>
        </member>
        <member name="F:mKit.OsGroup.osToolModel">
            <summary>
            Reference to a tool model
            </summary>
        </member>
        <member name="F:mKit.OsGroup.osIndicator">
            <summary>
            Reference to a indicator (indicating orienation) model
            </summary>
        </member>
        <member name="F:mKit.OsGroup.osCamera">
            <summary>
            Reference to the camera observing the quad.
            </summary>
        </member>
        <member name="F:mKit.OsGroup.toolCameraBelowSlice">
            <summary>
            Radiological: camera below slice, Ultrasound: camera above slice 
            </summary>
        </member>
        <member name="M:mKit.OsGroup.#ctor(mKit.ObliqueSliceConfig,System.Boolean)">
            <summary>
            Convenience class to provide access to prefab parts representing one oblique slice.
            </summary>
            <param name="_prefab"></param>
        </member>
        <member name="M:mKit.OsGroup.GetIndicatorTransform">
            <summary>
            Get the transform of the indicator hierarchy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.OsGroup.UpdateCameraSetup(System.Boolean)">
            <summary>
            Setup slice camera. Includes radiological or US setup.
            </summary>
            <param name="rtSizeIsAspect">if false, the rendertexture is quadtratic</param>
        </member>
        <member name="T:mKit.ProxyGeometry">
            <summary>
            ProxyGeometry is the base class for <see cref="T:mKit.VolumeCube"/> and <see cref="T:mKit.Toolgroup"/>.
            The class provides facilities to push configuration options to the GPU shader program.
            </summary>
        </member>
        <member name="F:mKit.ProxyGeometry.ID">
            <summary>
            Control ID
            </summary>
        </member>
        <member name="F:mKit.ProxyGeometry.uSamplerateFactor_id">
            <summary>
            Shader name id for uSampleRateFactor
            </summary>
        </member>
        <member name="M:mKit.ProxyGeometry.ApplyPresentationParameters(UnityEngine.Material,mKit.PresentationParameters)">
            <summary>
            Push presentation parameters to the GPU shader.
            </summary>
            <param name="material">the material</param>
            <param name="window">window state options</param>
        </member>
        <member name="M:mKit.ProxyGeometry.ApplyRenderOptions(UnityEngine.Material,mKit.RenderOptions)">
            <summary>
            Push "render" options to the GPU shader.
            </summary>
            <param name="material">the material</param>
            <param name="renderOptions">the options</param>
        </member>
        <member name="M:mKit.ProxyGeometry.ApplyToolgroupState(UnityEngine.Material,mKit.ToolgroupState)">
            <summary>
            Push toolgroup depended data to the GPU shader.
            </summary>
            <param name="material">the material</param>
            <param name="ts">a toolgroup state </param>
        </member>
        <member name="M:mKit.ProxyGeometry.OnWillRenderObject">
            <summary>
            Called for every camera during the same Update cycle.
            </summary>
        </member>
        <member name="T:mKit.RenderOptions">
            <summary>
            GPU shader parameters (RenderOptions)
            </summary>
        </member>
        <member name="M:mKit.RenderOptions.SetROI(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set region-of-interest with regard to original (unscaled) volume size.
            </summary>
            <param name="min">lower left (minimal) corner</param>
            <param name="max">upper right (maximum) corner</param>
        </member>
        <member name="P:mKit.RenderOptions.VolumeScaledSizeROI">
            <summary>
            The actual size after applying region-of-interest clipping (ROI).
            </summary>
        </member>
        <member name="P:mKit.RenderOptions.VolumeSize">
            <summary>
            The original (unscaled) volume size without ROI.
            </summary>
        </member>
        <member name="P:mKit.RenderOptions.VolumeScale">
            <summary>
            The normalized scale applied to the physical volume size.
            </summary>
        </member>
        <member name="P:mKit.RenderOptions.Vm2MinimumVoxelDistance">
            <summary>
            The minimum voxel distance, which is the minimum voxel distance along x-, y-, and/or z-axis.
            </summary>
        </member>
        <member name="P:mKit.RenderOptions.VolumeScaledSize">
            <summary>
            The original volume size scaled by <see cref="P:mKit.RenderOptions.VolumeScale"/>.
            </summary>
        </member>
        <member name="P:mKit.RenderOptions.changed">
            <summary>
            This property is set to true for certain proteries set in <see cref="T:mKit.Volume"/>.
            If true, event subscribers of <see cref="E:mKit.Volume.NotifyPresentationParameterChanged"/> during notified in <see cref="M:mKit.Volume.VolumeUpdate"/>.
            </summary>
        </member>
        <member name="P:mKit.RenderOptions.ReferenceSamplesPerMeter">
            <summary>
            Returns inverse of (volumeScale * minium voxel distance). 
            </summary>
        </member>
        <member name="M:mKit.RenderOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:mKit.ShapeType">
            <summary>
            The Enum-Types of the Shapes.
            </summary>
        </member>
        <member name="F:mKit.ShapeType.CUBOID">
            <summary>
            Cuboid
            </summary>
        </member>
        <member name="F:mKit.ShapeType.TUBE_X">
            <summary>
            Tube stretching along X axis
            </summary>
        </member>
        <member name="F:mKit.ShapeType.TUBE_Y">
            <summary>
            Tube stretching along Y axis
            </summary>
        </member>
        <member name="F:mKit.ShapeType.ELIPSOID">
            <summary>
            Ellipsoid (can be a regular sphere)
            </summary>
        </member>
        <member name="F:mKit.ShapeType.SPLINE">
            <summary>
            Spline
            </summary>
        </member>
        <member name="F:mKit.ShapeType.TUBE_Z">
            <summary>
            Tube stretching along Z axis
            </summary>
        </member>
        <member name="F:mKit.NoiseType.NONE">
            <summary>
            No noise, homogenous material.
            </summary>
        </member>
        <member name="F:mKit.NoiseType.GAUSS">
            <summary>
            Noise scattered with normal distribution.
            </summary>
        </member>
        <member name="F:mKit.NoiseType.RANGE">
            <summary>
            Noise scattered randomly over a value range.
            </summary>
        </member>
        <member name="F:mKit.NoiseType.ALTERNATING">
            <summary>
            Noise alternating between two values.
            </summary>
        </member>
        <member name="T:mKit.ShapeConfig">
            <summary>
            Shape config definition [uses normalized coordinates]
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.type">
            <summary>
            Shape type
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.edgeWidth">
            <summary>
            Thickness of shape edges
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.size">
            <summary>
            Size of the shape
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.color">
            <summary>
            Color for voxels. Actual color depends on stored color format.
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.color2">
            <summary>
            Second color. Used by <see cref="F:mKit.NoiseType.ALTERNATING"/>.
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.shapeCenter">
            <summary>
            Center of the shape
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.shapeRotation">
            <summary>
            Rotation around <see cref="F:mKit.ShapeConfig.shapeCenter"/>
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.noise">
            <summary>
            True, if color/intensity values are scattered over <see cref="F:mKit.ShapeConfig.noiseRange"/>.
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.noiseRange">
            <summary>
            Normalized noise fraction [0..1] applied to value range
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.data">
            <summary>
            Optional data object, necessary for <see cref="F:mKit.ShapeType.SPLINE"/>.
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig.centeredCoordinates">
            <summary>
            If true, the coordinate origin (0,0,0) is moved to the volume center. Default: front lower left. 
            </summary>
        </member>
        <member name="M:mKit.ShapeConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:mKit.ShapeConfig.#ctor(mKit.ShapeType,System.Single,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,mKit.NoiseType,System.Single)">
            <summary>
            ShapeConfig constructor (non-centered voxel coordinates, RGBA color)
            </summary>
            <param name="type">shape type</param>
            <param name="edgeWidth">edgeWidth (voxels)</param>
            <param name="size">shape size (in voxels)</param>
            <param name="color">shape color</param>
            <param name="center">shape center (voxels)</param>
            <param name="rotation">shape rotation</param>
            <param name="noise">NoiseType</param>
            <param name="noiseRange">normalized noise fraction [0..1] applied to value range</param>
        </member>
        <member name="M:mKit.ShapeConfig.#ctor(mKit.ShapeType,System.Single,UnityEngine.Vector3,System.Byte,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,mKit.NoiseType,System.Single)">
            <summary>
            ShapeConfig constructor (non-centered voxel coordinates, 8 bit intensity)
            </summary>
            <param name="type">shape type</param>
            <param name="edgeWidth">edgeWidth (voxels)</param>
            <param name="size">shape size (in voxels)</param>
            <param name="intensity8Bit">intensity suitable for Vm2 format <see cref="F:mKit.Vm2.FormatEnum.CT8"/></param>
            <param name="center">shape center (voxels)</param>
            <param name="rotation">shape rotation</param>
            <param name="centeredCoordinates">if true, center coordinates range from -0.5 .. 0.5</param>
            <param name="noise">NoiseType</param>
            <param name="noiseRange">normalized noise fraction [0..1] applied to value range</param>
        </member>
        <member name="M:mKit.ShapeConfig.GetComputeConfig(mKit.Vm2Header)">
            <summary>
            Convert normalized shape config to HLSL parameters [experimental version]
            </summary>
            <param name="header">vm2 header</param>
            <returns>computeshader parameter</returns>
        </member>
        <member name="M:mKit.ShapeConfig.SetData(mKit.ShapeType,System.Single,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,System.Boolean,mKit.NoiseType,System.Single)">
            <summary>
            Set instance data. Used by constructors.
            </summary>
            <param name="type"></param>
            <param name="edgeWidth"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="center"></param>
            <param name="rotation"></param>
            <param name="centerCoordinates"></param>
            <param name="sizesInMillimeter"></param>
            <param name="noise">NoiseType</param>
            <param name="noiseRange">normalized noise fraction [0..1] applied to value range</param>
        </member>
        <member name="M:mKit.ShapeConfig.Clone">
            <summary>
            Clone by <see cref="M:System.Object.MemberwiseClone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mKit.ShapeConfigVoxel">
            <summary>
            Shape config definition [uses absolute voxel coordinates]
            </summary>
        </member>
        <member name="M:mKit.ShapeConfigVoxel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:mKit.ShapeConfigVoxel.#ctor(mKit.ShapeType,System.Int32,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Vector3,UnityEngine.Quaternion,mKit.NoiseType,System.Single)">
            <summary>
            ShapeConfig constructor (non-centered voxel coordinates, RGBA color)
            </summary>
            <param name="type">shape type</param>
            <param name="edgeWidth">edgeWidth (voxels)</param>
            <param name="size">shape size (in voxels)</param>
            <param name="color">shape color</param>
            <param name="center">shape center (voxels)</param>
            <param name="rotation">shape rotation</param>
            <param name="noise">NoiseType</param>
            <param name="noiseRange">normalized noise fraction [0..1] applied to value range</param>
        </member>
        <member name="M:mKit.ShapeConfigVoxel.#ctor(mKit.ShapeType,System.Int32,UnityEngine.Vector3,System.Byte,UnityEngine.Vector3,UnityEngine.Quaternion,mKit.NoiseType,System.Single)">
            <summary>
            ShapeConfig constructor (non-centered voxel coordinates, 8 bit intensity)
            </summary>
            <param name="type">shape type</param>
            <param name="edgeWidth">edgeWidth (voxels)</param>
            <param name="size">shape size (in voxels)</param>
            <param name="intensity8Bit">intensity suitable for Vm2 format <see cref="F:mKit.Vm2.FormatEnum.CT8"/></param>
            <param name="center">shape center (voxels)</param>
            <param name="rotation">shape rotation</param>
            <param name="noise">NoiseType</param>
            <param name="noiseRange">normalized noise fraction [0..1] applied to value range</param>
        </member>
        <member name="M:mKit.ShapeConfigVoxel.GetComputeConfig(mKit.Vm2Header)">
            <summary>
            Get ShapeConfig for HLSL ComputeShader
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.ShapeConfigVoxel.ToString">
            <summary>
            Shape definition as string.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:mKit.ShapeConfig_HLSL">
            <summary>
            Subset of <see cref="T:mKit.ShapeConfigVoxel"/> used in ComputeShader.
            Non-centered coordinates, sizes are given in voxels.
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.mat">
            <summary>
            Rotation matrix
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.pos">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.halfSize">
            <summary>
            Half size of shape.
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.edgeWidth">
            <summary>
            Edge width
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.color1">
            <summary>
            Shape color
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.color2">
            <summary>
            Shape color (secondary)
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.shapeType">
            <summary>
            Shape type
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.noiseType">
            <summary>
            Noise type, cp. <see cref="T:mKit.NoiseType"/>
            </summary>
        </member>
        <member name="F:mKit.ShapeConfig_HLSL.noiseRange">
            <summary>
            Normalized noise range
            </summary>
        </member>
        <member name="M:mKit.ShapeConfig_HLSL.#ctor(mKit.ShapeType,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,UnityEngine.Color,mKit.NoiseType,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="shapeType"></param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="rotation"></param>
            <param name="edgeWidth"></param>
            <param name="color1"></param>
            <param name="color2"></param>
            <param name="noiseType"></param>
            <param name="noiseRange"></param>
        </member>
        <member name="T:mKit.Texture3DGenerator">
            <summary>
            Internal volume Texture3D generator class. Builds a Texture3D object from VM2 data.
            
            The method <see cref="M:mKit.Texture3DGenerator.ConvertSlices(System.Int32)"/> is thread-safe on a per-slice level.
            For multi-threaded usage of the class see <see cref="T:mKit.Texture3DGeneratorAsync"/>.
            
            Lock the supplied <see cref="T:mKit.Vm2"/> object to get the currently available slice index in a thread-safe way.
            The lock is waited upon in <see cref="M:mKit.Texture3DGenerator.IsDataAvailable(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:mKit.Texture3DGenerator.#ctor(mKit.Vm2,mKit.TextureData,UnityEngine.Color32[],UnityEngine.Color[],System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="vm2"></param>
            <param name="textureData"></param>
            <param name="texels"></param>
            <param name="texels_16"></param>
            <param name="zmod"></param>
            <param name="phase"></param>
        </member>
        <member name="M:mKit.Texture3DGenerator.IsDataAvailable(System.Int32)">
            <summary>
            Is the data for slice at index already in memory?
            </summary>
            <param name="sliceIndex">slice index</param>
            <returns></returns>
        </member>
        <member name="P:mKit.Texture3DGenerator.Completed">
            <summary>
            If true, all partitions have been processed.
            </summary>
        </member>
        <member name="M:mKit.Texture3DGenerator.ConvertSlices(System.Int32)">
            <summary>
            Converts a partion of slices from VM2 format to a 3D texture format.
            To convert all slices, use zmod=1 and zpart=0 (default).
            </summary>
            <param name="zpart">the coset to be processed</param>
        </member>
        <member name="T:mKit.TextureConversionProgress">
            <summary>
            Info class for texture conversion
            </summary>
        </member>
        <member name="F:mKit.TextureConversionProgress.SlicesTotal">
            <summary>
            Total slices to be processed
            </summary>
        </member>
        <member name="F:mKit.TextureConversionProgress.SlicesProcessed">
            <summary>
            Slices processed
            </summary>
        </member>
        <member name="F:mKit.TextureConversionProgress.Ticks">
            <summary>
            Elapsed ticks
            </summary>
        </member>
        <member name="P:mKit.TextureConversionProgress.ConversionCompleted">
            <summary>
            True, if the conversion has been completed.
            </summary>
        </member>
        <member name="P:mKit.TextureConversionProgress.ElapsedSeconds">
            <summary>
            Elapsed time
            </summary>
        </member>
        <member name="P:mKit.TextureConversionProgress.Info">
            <summary>
            State info string
            </summary>
        </member>
        <member name="P:mKit.TextureConversionProgress.NormalizedProgress">
            <summary>
            Normalized progress [0..1]
            </summary>
        </member>
        <member name="P:mKit.TextureConversionProgress.State">
            <summary>
            State
            </summary>
        </member>
        <member name="M:mKit.TextureConversionProgress.InitProcessingState(System.Int32)">
            <summary>
            Initialize the <see cref="T:mKit.TextureConversionProgress"/>.
            </summary>
            <param name="_slicesTotal">number of slices in this processing run</param>
        </member>
        <member name="M:mKit.TextureConversionProgress.Reset">
            <summary>
            Reset instance.
            </summary>
        </member>
        <member name="T:mKit.TextureData">
            <summary>
            Container class wrapping information and volume/ess textures for one volume instance.
            </summary>
        </member>
        <member name="F:mKit.TextureData.vm2">
            <summary>
            Source Vm2 (may not have host data for GPU-generated volume data)
            </summary>
        </member>
        <member name="F:mKit.TextureData.texDim">
            texure dimensions
        </member>
        <member name="F:mKit.TextureData.payload">
            normalized usable data range in 3D texture
        </member>
        <member name="F:mKit.TextureData.mKitTexType">
            <summary>
            Texturing mode
            </summary>
        </member>
        <member name="F:mKit.TextureData.textureFormat">
            <summary>
            Texture3D format
            </summary>
        </member>
        <member name="F:mKit.TextureData.renderTextureFormat">
            <summary>
            RenderTexture (3D) format
            </summary>
        </member>
        <member name="F:mKit.TextureData.VolumeTextureList">
            <summary>
            Phase volumes 
            </summary>
        </member>
        <member name="F:mKit.TextureData.ESSfromDisk">
            <summary>
            flag indicating if ESS data was loaded from disk
            </summary>
        </member>
        <member name="P:mKit.TextureData.ESSLevels">
            <summary>
            ESS levels
            </summary>
        </member>
        <member name="P:mKit.TextureData.ESSTextureLists">
            <summary>
            ESS texture for each volume phase. ESS level on secondary array level. 
            </summary>
        </member>
        <member name="M:mKit.TextureData.#ctor(mKit.Vm2,mKit.mKitTextureType,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="vm2"></param>
            <param name="texType"></param>
            <param name="useRenderTexture"></param>
            <param name="pot"></param>
        </member>
        <member name="M:mKit.TextureData.Init(mKit.Vm2,System.Boolean)">
            <summary>
            Called by constructor
            </summary>
            <param name="_vm2"></param>
            <param name="pot">assume power-of-two (POT) sizes</param>
        </member>
        <member name="M:mKit.TextureData.SetTextureFormat(mKit.mKitTextureType)">
            <summary>
            Called by constructor
            </summary>
            <param name="texMode"></param>
        </member>
        <member name="M:mKit.TextureData.SetupESSTextures(System.Int32,UnityEngine.Texture[])">
            <summary>
            Setup single-level ESS texture(s).
            </summary>
            <param name="blockWidth"></param>
            <param name="essTexture"></param>
        </member>
        <member name="M:mKit.TextureData.GetESSBlockWidths(System.Int32,System.Int32)">
            <summary>
            Get ESS blockwidth array which defines a blockwidth for each ESS level.
            </summary>
            <param name="firstLevelBlockWidth">level 0 blockWidth</param>
            <param name="levels">ESS level</param>
            <returns>integer array</returns>
        </member>
        <member name="T:mKit.Toolgroup">
            <summary>
            Toolgroup component. The slices of the toolgroup are configured through the Editor, <see cref="F:mKit.Toolgroup.osConfig"/>.
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.debugCamAboveSlice">
            <summary>
            toggle cam position in inspector
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.material">
            <summary>
            Slice Material Array
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.renderTexture">
            <summary>
            Slice textures
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.osGroup">
            <summary>
            Prefab instance array
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.toolSize">
            <summary>
            toolsize array
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.osConfig">
            <summary>
            Configuration array for slices in this toolgroup
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.transformIsLocal">
            <summary>
            used in <see cref="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.TransformEventArgs)"/>.
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.ultrasoundTex2D">
            <summary>
            Ultrasound delegate rendering (CPU)
            </summary>
        </member>
        <member name="F:mKit.Toolgroup.ultrasoundRenderTex">
            <summary>
            Ultrasound delegate rendering (GPU)
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.UpdateTextures(System.Int32,System.Boolean)">
            <summary>
            Create Texture2D or RenderTexture buffers for US data.
            Called from <see cref="M:mKit.Toolgroup.Init"/> and <see cref="M:mKit.Toolgroup.SetToolSize(System.Int32,UnityEngine.Vector2)"/>.
            </summary>
            <param name="sliceIndex"></param>
            <param name="useRT">true: use RenderTexture, false: Texture2D</param>
        </member>
        <member name="M:mKit.Toolgroup.Init(mKit.Volume)">
            <summary>
            Init for new volume data
            </summary>
            <param name="_control"></param>
        </member>
        <member name="M:mKit.Toolgroup.SetupSliceTexture(System.Int32)">
            <summary>
            Setup slice texture, differing between radiological or ultrasound mode.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:mKit.Toolgroup.ToolCameraAboveSlice">
            <summary>
            Toggles camera above/below slice. 
            Note: camera is below (lookup up) for radiological setup, above (looking down) for ultrasound setup. 
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.SetupObserver">
            <summary>
            Subscribe to events.
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.Vm2EventArgs)">
            <summary>
            Event delegate callback. Subscribe this as <see cref="!:Vm2.notifyVm2Loaded" /> event delegate
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.VolumeTextureEventArgs)">
            <summary>
            Notification for new texture data 
            event delegate callback. Subscribe this as <see cref="!:VolumeText" /> event delegate
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:mKit.Toolgroup.EnableToolgroup">
            <summary>
            Enable toolgroup
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.SetIndicator(System.Int32,UnityEngine.GameObject)">
            <summary>
            Set an indicator gameobject for a slice
            </summary>
            <param name="sliceIndex">slice index </param>
            <param name="gameObject">gameobject used with type CUSTOM</param>
        </member>
        <member name="M:mKit.Toolgroup.SetSliceActive(System.Int32,System.Boolean)">
            <summary>
            toggle slice/osgroup active
            </summary>
            <param name="i">slice index</param>
            <param name="state">on or off</param>
        </member>
        <member name="M:mKit.Toolgroup.SetSliceBorderColor(UnityEngine.Color,System.Int32,System.Int32)">
            <summary>
            Set edge border color.
            </summary>
            <param name="col">color</param>
            <param name="sliceIndex">slice index</param>
            <param name="edge">edge index. slice borders range from 0 to 3, the slice normal is at index 4.</param>
        </member>
        <member name="M:mKit.Toolgroup.SetSliceBorderLength(System.Single,System.Single)">
            <summary>
            For border length details, see <see cref="F:mKit.Config.DefaultSliceBorderNormalizedOuterDistance"/>.
            </summary>
            <param name="absoluteOuterDistance"></param>
            <param name="absoluteInnerDistance"></param>
        </member>
        <member name="M:mKit.Toolgroup.SetToolModel(UnityEngine.GameObject,System.Int32)">
            <summary>
            Replace current scene representation of the current tool
            </summary>
            <param name="go"></param>
            <param name="sliceIndex"></param>
        </member>
        <member name="M:mKit.Toolgroup.GetIndicatorParentTransform(System.Int32)">
            <summary>
            Get the transform of the indicator hierarchy belonging to a slice of the toolgroup.
            </summary>
            <param name="sliceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Toolgroup.GetToolCamera(System.Int32)">
            <summary>
            Get the camera observing the slice quad.
            </summary>
            <param name="sliceIndex">index</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Toolgroup.GetToolModelTransform(System.Int32)">
            <summary>
            Get the transform of the tool model hierarchy belonging to the toolgroup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Toolgroup.GetToolSliceTransform(System.Int32)">
            <summary>
            Get the transform of a slice of the toolgroup. 
            </summary>
            <param name="sliceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.RenderOptionsEventArgs)">
            <summary>
            Push <see cref="T:mKit.RenderOptions"/> to individual slices. Compare <see cref="!:ProxyGeomtry"/>.
            </summary>
            <param name="renderOptions"></param>
        </member>
        <member name="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.PresentationParameterEventArgs)">
            <summary>
            Push <see cref="T:mKit.PresentationParameters"/> to individual slices. Compare <see cref="T:mKit.ProxyGeometry"/>.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.ToolgroupEventArgs)">
            <summary>
            Push <see cref="T:mKit.ToolgroupState"/> to individual slices. Compare <see cref="T:mKit.ProxyGeometry"/>.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:mKit.Toolgroup.GetSliceQuad(System.Int32)">
            <summary>
            Gets the transform of the quad proxy geometry of a slice in this toolgroup
            </summary>
            <param name="index">index of the slice</param>
            <returns>transform</returns>
        </member>
        <member name="M:mKit.Toolgroup.GetSliceRenderer(System.Int32)">
            <summary>
            Gets the renderer of the quad proxy geometry of a slice in this toolgroup
            </summary>
            <param name="index">index of the slice</param>
            <returns>renderer</returns>
        </member>
        <member name="M:mKit.Toolgroup.GetSliceProbeModel(System.Int32)">
            <summary>
            Gets the transform of the probe model geometry attached to a slice in this toolgroup
            </summary>
            <param name="index">index of the slice</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Toolgroup.SetToolSize(UnityEngine.Vector2)">
            <summary>
            Set tool size on all slices in this toolgroup.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:mKit.Toolgroup.UpdateTextureTypeUS(System.Boolean)">
            <summary>
            Called from <see cref="P:mKit.Volume.UltrasoundUseRendertexture"/>.
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.SetToolSize(System.Int32,UnityEngine.Vector2)">
            <summary>
            Set tool size on one slice
            </summary>
            <param name="index">index of the slice</param>
            <param name="size">size (x,y)</param>
        </member>
        <member name="M:mKit.Toolgroup.OnViewportChanged(mKit.Volume,mKit.Events.ViewportEventArgs)">
            <summary>
            Pick up application screen size and/or orientation changes
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.GetDefaultRotation(System.Int32)">
            <summary>
            The default rotation to add for an connected orientation cube
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Toolgroup.GenerateUltrasoundFrame">
            <summary>
            Generate ultrasound frame
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.SliceUpdate">
            <summary>
            Called from Control.VolumeUpdate (which es called for each camera rendering the gameobject)
            </summary>
        </member>
        <member name="M:mKit.Toolgroup.DataNotify(mKit.Volume,mKit.Events.TransformEventArgs)">
            <summary>
            React to volume transform changes.
            </summary>
            <param name="sender">volume control</param>
            <param name="ea">transform change event arguments</param>
        </member>
        <member name="T:mKit.ToolgroupState">
            <summary>
            GPU shader parameters (ToolgroupState)
            </summary>
        </member>
        <member name="M:mKit.ToolgroupState.#ctor">
            related to secondary options like indicators
        </member>
        <member name="M:mKit.ToolgroupState.#ctor(System.Int32)">
            <summary>
            Construct a ToolgroupState with n slices. Currently 3 slices are supported by the GPU shader.
            </summary>
            <param name="_sliceCount">number of slices</param>
        </member>
        <member name="M:mKit.ToolgroupState.SetOsActive(System.Int32,System.Boolean)">
            <summary>
            Set the active state of a slice in this toolgroup state
            </summary>
            <param name="i">slice index</param>
            <param name="active"></param>
        </member>
        <member name="M:mKit.ToolgroupState.GetOsActiveVector">
            <summary>
            Get the slice's Active states as Vector. This vector can be passed to the GPU shader. 
            </summary>
        </member>
        <member name="M:mKit.ToolgroupState.update(System.Int32,UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
            Updates the slice info (and in consequence normals and positions) in the toolgroup state 
            </summary>
            <param name="index">the index of the toolgroup's slice info to be updated</param>
            <param name="t1">the transform of toolgroup's slice hierarchy.</param>
            <param name="t2">the transform of toolgroup's slice quad.</param>
            <param name="size">the size of the slice (x,y)</param>
            <param name="volumeScale">volume scale</param>
        </member>
        <member name="M:mKit.ToolgroupState.SetEdgeBorderColor(UnityEngine.Color,System.Int32,mKit.SliceEdgeEnum)">
            <summary>
            Set edge border color.
            </summary>
            <param name="col">Color</param>
            <param name="sliceIndex">slice index</param>
            <param name="edge">edge</param>
        </member>
        <member name="M:mKit.ToolgroupState.ApplyToolgroupConfig">
            <summary>
            Apply edge color and indicator config to toolgroup component.
            </summary>
        </member>
        <member name="M:mKit.ToolgroupState.SetIndicatorPositionNormalized(System.Int32,UnityEngine.Vector2)">
            <summary>
            Sets the indicator position normalized to slice size and relative to slice center. 
            A x or y value of 0.5f or -0.5f sets the indicator position to one edge of the slice.
            </summary>
            <param name="si">slice index</param>
            <param name="posnorm">Vector with x and y position </param>
        </member>
        <member name="M:mKit.ToolgroupState.UpdateNormals(UnityEngine.Transform,UnityEngine.Transform,mKit.ToolgroupState)">
            <summary>
            Updates GPU shader parameters, i.e. normals and related data depending on current Tool transform. 
            </summary>
        </member>
        <member name="T:mKit.UltrasoundDelegate">
            <summary>
            Compat class
            </summary>
        </member>
        <member name="T:mKit.SlicePositionInData">
            <summary>
            Struct describing slice in volume data.
            </summary>
        </member>
        <member name="T:mKit.UltrasoundRendering">
            <summary>
            Implementation of the <see cref="T:mKit.IUltrasoundRenderer"/> interface.
            </summary>
        </member>
        <member name="F:mKit.UltrasoundRendering.sectorAngleDeg">
            <summary>
            sector opening angle [degrees] 
            </summary>
        </member>
        <member name="F:mKit.UltrasoundRendering.sectorVerticalOffset">
            <summary>
            Sector translation offset [from row 0]
            </summary>
        </member>
        <member name="F:mKit.UltrasoundRendering.sectorVerticalStretch">
            <summary>
            Sector vertical stretch [applied to slice Y pos * cos(w)]
            </summary>
        </member>
        <member name="F:mKit.UltrasoundRendering.sectorHorizontalStretch">
            <summary>
            Horizontal stretch factor [applied to slice X pos * sin(w)]
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRendering.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:mKit.UltrasoundRendering.IsReady">
            <summary>
            Is the US renderer ready.
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRendering.Init(mKit.Volume)">
            <summary>
            Generate a CPU Texture
            </summary>
            <param name="ctrl">data source instance</param>
        </member>
        <member name="M:mKit.UltrasoundRendering.Generate(System.Int32)">
            <summary>
            Generate US frame
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:mKit.UltrasoundRendering.SetupSPID">
            <summary>
            Setup slice-positions-in-data
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRendering.GenerateTexture">
            <summary>
            Actual generation method for the US image.
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRendering.ComputeTexel(System.Single,System.Single,System.Int32)">
            <summary>
            Computes a texel of the US image.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="shadowIndex"></param>
            <param name="dataCurrent"></param>
        </member>
        <member name="M:mKit.UltrasoundRendering.CalcShadow(System.Int32)">
            <summary>
            Calculates a "shadow", with random values
            </summary>
            <param name="rowNumber">the acutal row</param>
            <returns>a byte with the pixel-values</returns>
        </member>
        <member name="P:mKit.UltrasoundRendering.ShadowThreshold">
            <summary>
            Get/set the voxel intensity (0..255 for 8-bit CT or RGB data) threshold above which shadowing occurs. 
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRendering.SetDefaultThreshold(mKit.VolumeTypeEnum)">
            <summary>
            Set the default shadowing threshold for the given volume type.
            </summary>
            <param name="volumeType"></param>
            <returns>default threshold</returns>
        </member>
        <member name="M:mKit.UltrasoundRendering.SetSectorParameters(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set parameters configuring the shape of the sector
            </summary>
        </member>
        <member name="T:mKit.UltrasoundRenderingAsync">
            <summary>
            Background worker version of the <see cref="T:mKit.UltrasoundRendering"/> class.
            Uses same interface (<see cref="T:mKit.IUltrasoundRenderer"/>).
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRenderingAsync.Generate(System.Int32)">
            <summary>
            Generate US frame
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:mKit.UltrasoundRenderingAsyncMulti">
            <summary>
            Multi background worker version of the <see cref="T:mKit.UltrasoundRendering"/> class.
            Uses same interface (<see cref="T:mKit.IUltrasoundRenderer"/>).
            </summary>
        </member>
        <member name="P:mKit.UltrasoundRenderingAsyncMulti.IsReady">
            <summary>
            Is the US renderer ready.
            </summary>
        </member>
        <member name="M:mKit.UltrasoundRenderingAsyncMulti.Generate(System.Int32)">
            <summary>
            Generate US frame
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:mKit.UltrasoundRenderingAsyncMulti.SetDefaultThreshold(mKit.VolumeTypeEnum)">
            <summary>
            Set the default shadowing threshold for the given volume type.
            </summary>
            <param name="volumeType"></param>
            <returns>default threshold</returns>
        </member>
        <member name="M:mKit.UltrasoundRenderingAsyncMulti.SetSectorParameters(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set parameters configuring the shape of the sector
            </summary>
        </member>
        <member name="P:mKit.UltrasoundRenderingAsyncMulti.ShadowThreshold">
            <summary>
            Get/set the voxel intensity (0..255 for 8-bit CT or RGB data) threshold above which shadowing occurs. 
            </summary>
        </member>
        <member name="T:mKit.Vm2SectionType">
            <summary>
            Section type ID for VM2.1 sections
            </summary>
        </member>
        <member name="T:mKit.Vm2SectionEncoding">
            <summary>
            Storage encoding
            </summary>
        </member>
        <member name="T:mKit.Vm2">
            <summary>
            VM2 class
            </summary>
        </member>
        <member name="E:mKit.Vm2.OnVm2Loading">
            API users should subscribe to Control.NotifyVm2Loaded instead
            <summary>
            Internal event handler signaling loading of VM2 data.
            </summary>
        </member>
        <member name="M:mKit.Vm2.#ctor">
            <summary>
            Constructor. Note that no volume data memory is allocated.
            </summary>
        </member>
        <member name="M:mKit.Vm2.#ctor(mKit.Vm2Header)">
            <summary>
            Constructor allocating memory as needed.
            </summary>
            <param name="header">VM2 header</param>
        </member>
        <member name="M:mKit.Vm2.#ctor(mKit.Vm2.FormatEnum,UnityEngine.Vector3,UnityEngine.Vector3,System.UInt32)">
            <summary>
            Constructor allocating memory as needed.
            </summary>
            <param name="format">voxel format</param>
            <param name="dataDim">voxel dimensions</param>
            <param name="millimeterDim">real dimensions</param>
            <param name="phases">volume phases</param>
        </member>
        <member name="P:mKit.Vm2.Header">
            <summary>
            The header of this VM2.
            </summary>
        </member>
        <member name="M:mKit.Vm2.SetSection(mKit.Vm2SectionType,System.UInt32,System.Object)">
            <summary>
            
            </summary>
            <param name="sectionType"></param>
            <param name="data"></param>
            <param name="items"></param>
        </member>
        <member name="P:mKit.Vm2.MinimumVoxelDistance">
            <summary>
            Voxel distance of this volume (meters). Minimal voxel distance for non-isotropic volumes.
            </summary>
        </member>
        <member name="M:mKit.Vm2.GetDataIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the raw data byte offset for voxel coordinates (x,y,z,t) considering bytes_per_voxel [only first subvolume]
            </summary>
            <returns>array index</returns>
        </member>
        <member name="M:mKit.Vm2.GetDataIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the raw data byte offset for voxel coordinates (x,y,z,t) considering bytes_per_voxel
            </summary>
            <returns>array index</returns>
        </member>
        <member name="M:mKit.Vm2.IsDataIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Returns true if coordinates are inside the volume data.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="phase"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2.IsDataIndex(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns true if millimeter coordinates are inside the volume data.
            </summary>
            <param name="x">millimeter x</param>
            <param name="y">millimeter y</param>
            <param name="z">millimeter z</param>
            <param name="phase">phase number</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2.LoadFile(System.String,mKit.Vm2.NewDataNotification,UnityEngine.MonoBehaviour)">
            <summary>
            Loads a Vm2 file
            </summary>
            <param name="name">filename</param>
            <param name="notifyCallback">called when Vm2 starts loading</param>
            <returns>a new Vm2 instance</returns>
        </member>
        <member name="M:mKit.Vm2.IsVm2(System.String)">
            <summary>
            Returns false, if the file contains no plausible data.
            Note: works only for STANDALONE platforms (i.e. not on Android)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2.InitVm2(System.String,mKit.Vm2Header,mKit.Vm2.GenerateVm2Data,mKit.Vm2.NewDataNotification,System.Boolean)">
            <summary>
            Initialize the Vm2 instance with new parameters and a delegate operating on the raw data array.
            If the instance is locked through <see cref="P:mKit.Vm2.DataLock"/> the call is ignored.
            </summary>
            <param name="filename">filename</param>
            <param name="header">instance of <see cref="T:mKit.Vm2Header" /> setting Vm2 parameters</param>
            <param name="generateDataDelegate">a delegate operating on a Vm2 instance</param>
            <param name="notifyCallback">callback method to get Vm2 instance</param>
            <param name="allocateHostMemory">if false, no host memory is allocated</param>
        </member>
        <member name="M:mKit.Vm2.BeginEdit">
            <summary>
            Lock Vm2 data for editing.
            </summary>
        </member>
        <member name="M:mKit.Vm2.EndEdit">
            <summary>
            Unlock Vm2 data.
            </summary>
        </member>
        <member name="M:mKit.Vm2.EditData(mKit.Vm2.GenerateVm2Data)">
            <summary>
            Procedural edit of Vm2 data.
            </summary>
            <param name="generateDataDelegate">edit delegate</param>
        </member>
        <member name="M:mKit.Vm2.GetVoxel8(System.Int32)">
            <summary>
            Returns a 8 bit representation of the voxel at specified coordinates
            </summary>
            <param name="x">x data coordinate</param>
            <param name="y">y data coordinate</param>
            <param name="z">z data coordinate</param>
            <param name="phase">time phase</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2.SetVoxel(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Int32)">
            <summary>
            Sets a voxel's color in the VM2 data. For grayscale volumes (CT, MR) only the alpha channel is evaluated (due to texture format issues, red channel on GPU).
            </summary>
            <param name="x">voxel x coordinate</param>
            <param name="y">voxel y coordinate</param>
            <param name="z">voxel z coordinate</param>
            <param name="c">rgb color - for grayscale volumes (CT, MR) only the R(red) channel is evaluated</param>
            <param name="phase">the time phase index of the VM2 sub volume</param>
        </member>
        <member name="M:mKit.Vm2.SetVoxel(System.Int32,System.Int32,System.Int32,UnityEngine.Color32,System.Int32)">
            <summary>
            Set a voxel in Vm2 source data. This method accepts a Color32 color.
            For more details, see <see cref="M:mKit.Vm2.SetVoxel(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Int32)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="c32"></param>
            <param name="phase"></param>
        </member>
        <member name="M:mKit.Vm2.SetVoxelEncodeNormal(System.Int32,System.Int32,System.Int32,UnityEngine.Color32,System.Int32)">
            <summary>
            Set normal data for a voxel in Vm2 source data. This method accepts (x,y,z) in (r,g,b) of a Color32 color.
            For more details, see <see cref="M:mKit.Vm2.SetVoxel(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Int32)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="c32"></param>
            <param name="phase"></param>
        </member>
        <member name="M:mKit.Vm2.AllocateDataMemory">
            <summary>
            Allocates an empty byte array for vm2 data for <see cref="P:mKit.Vm2.RawDataByteArray"/>.
            </summary>
            <returns>true on success, false on exception</returns>
        </member>
        <member name="M:mKit.Vm2.AllocateDataMemory(System.Byte[])">
            <summary>
            Allocate host memory with content from native array 
            </summary>
            <param name="bytes">native array</param>
        </member>
        <member name="M:mKit.Vm2.Coroutine_LoadVm2_Lefthanded">
            <summary>
            Loads the right-handed data from Vm2 file, inverting slice order to Unity3D left-handed
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2.Coroutine_DataProcedure(mKit.Vm2.GenerateVm2Data)">
            <summary>
            Coroutine for executing a procedural generation/editing of Vm2 data.
            Uses a background thread if <see cref="P:mKit.Config.MultithreadedScripting"/> is true. (False for WebGL platform).
            </summary>
            <param name="procedureMethod"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2.SaveData(System.String)">
            <summary>
            Saves the VM2 data
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:mKit.Vm2.SaveData(System.String,mKit.Vm2.FormatEnum,mKit.Vm2DataLoader.ConvertSliceDelegate)">
            <summary>
            Saves the VM2 data.
            </summary>
            <param name="filename">filename</param>
            <param name="format">target format</param>
            <param name="convertSliceDelegate">a delegate implementing data conversion to the target format.
            The default is null which means the supplied target format must be identical to the source format.</param>
        </member>
        <member name="M:mKit.Vm2.AddVm2Section(mKit.Vm2Section)">
            <summary>
            Add a section (VM2.1)
            </summary>
            <param name="vm2Section"></param>
        </member>
        <member name="M:mKit.Vm2DataConversion.ConvertToRGBA32(mKit.Vm2.FormatEnum,mKit.Vm2.FormatEnum,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert Vm2 data to RGBA32.
            </summary>
            <param name="sourceFormat"></param>
            <param name="destFormat"></param>
            <param name="sourceData"></param>
            <param name="sourceSliceSize"></param>
            <param name="offset"></param>
            <param name="destSliceData"></param>
            <param name="destSliceSize"></param>
        </member>
        <member name="M:mKit.Vm2DataConversion.ConvertVoxelManLabelSlice16(mKit.Vm2.FormatEnum,mKit.Vm2.FormatEnum,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Converts VoxelMan 16-Bit Label Data to 8-Bit
            </summary>
            <param name="sourceFormat"></param>
            <param name="destFormat"></param>
            <param name="sourceData"></param>
            <param name="sourceSliceSize"></param>
            <param name="offset"></param>
            <param name="destData"></param>
            <param name="destSliceSize"></param>
        </member>
        <member name="T:mKit.Vm2DataLoader">
            <summary>
            Internal Vm2 data loading class.
            
            The <see cref="M:mKit.Vm2DataLoader.Load"/> method can be run on a background thread. 
            See <see cref="T:mKit.Vm2DataLoaderAsync"/> for an implementation.
            For multi-threading purposes the update of <see cref="P:mKit.Vm2LoadingProgress.SlicesReadIndex"/> is done with a lock to the <see cref="T:mKit.Vm2"/> object.
            </summary>
        </member>
        <member name="F:mKit.Vm2DataLoader.vm2">
            <summary>
            VM2 instance to operate on
            </summary>
        </member>
        <member name="F:mKit.Vm2DataLoader.State">
            <summary>
            Progress information object 
            </summary>
        </member>
        <member name="T:mKit.Vm2DataLoader.ConvertSliceDelegate">
            <summary>
            Delegate signature used for data format conversions.
            </summary>
            <param name="sourceFormat"></param>
            <param name="destFormat"></param>
            <param name="sourceData"></param>
            <param name="sourceSliceSize"></param>
            <param name="offset"></param>
            <param name="destSliceData"></param>
            <param name="destSliceSize"></param>
        </member>
        <member name="M:mKit.Vm2DataLoader.#ctor(mKit.Vm2,System.IO.Stream,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="_vm2"></param>
            <param name="_stream"></param>
            <param name="_blockSize"></param>
        </member>
        <member name="M:mKit.Vm2DataLoader.WriteVm2RightHanded(mKit.Vm2.FormatEnum,mKit.Vm2DataLoader.ConvertSliceDelegate)">
            <summary>
            Write VM2, converting slice order from unity-left-handed to vm2-right-handed
            </summary>
        </member>
        <member name="M:mKit.Vm2DataLoader.Load">
            <summary>
            Loads data of vm2.
            </summary>
        </member>
        <member name="M:mKit.Vm2DataLoader.ReadSections">
            <summary>
            Load VM2.1 sections and add these to <see cref="F:mKit.Vm2.sectionDict"/>.
            </summary>
        </member>
        <member name="M:mKit.Vm2DataLoader.WriteSections">
            <summary>
            Write VM2.1 sections found in <see cref="F:mKit.Vm2.sectionDict"/>.
            </summary>
        </member>
        <member name="T:mKit.Vm2DataLoaderAsync">
            <summary>
            Asynchronous Vm2 loader derived from <see cref="T:mKit.Vm2DataLoader"/>.
            A single background worker is launched which calls <see cref="M:mKit.Vm2DataLoader.Load"/>.
            </summary>
        </member>
        <member name="M:mKit.Vm2DataLoaderAsync.#ctor(mKit.Vm2,System.IO.Stream,System.Int32)">
            <summary>
            Loads a VM2 asychronously using System.ComponentModel.BackgroundWorker.
            </summary>
            <param name="_vm2"></param>
            <param name="_stream"></param>
            <param name="_blockSize"></param>
        </member>
        <member name="M:mKit.Vm2DataLoaderAsync.Load">
            <summary>
            Loading async start
            </summary>
        </member>
        <member name="M:mKit.Vm2DataLoaderAsync.Bw_Load(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Background worker thread loading.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:mKit.Vm2DataLoaderAsync.Bw_LoadCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Background worker thread completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:mKit.Vm2DataLoaderAsync.LoadingCompleted">
            <summary>
            IO operation state. Uses locking to account for multi-threaded access.
            </summary>
        </member>
        <member name="T:mKit.EssData">
            <summary>
            Empty-space-skipping (ESS) voxels hold a threshold value.
            Each ESS voxel covers a subvolume of the data volume, cp. <see cref="F:mKit.EssData.blockWidth"/>. 
            </summary>
        </member>
        <member name="F:mKit.EssData.blockWidth">
            <summary>
            ESS blockwidth (covered subvolume block)
            </summary>
        </member>
        <member name="F:mKit.EssData.data">
            <summary>
            ESS voxel data
            </summary>
        </member>
        <member name="M:mKit.EssData.#ctor(System.Int32,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="blockWidth"></param>
            <param name="data"></param>
        </member>
        <member name="T:mKit.Vm2ESS">
            <summary>
            Class for reading Vm2 empty-space-skipping (ESS) data.
            </summary>
        </member>
        <member name="T:mKit.Vm2Header">
            <summary>
            A class representing the data from the VM2 header
            </summary>
        </member>
        <member name="F:mKit.Vm2Header.Vm2HeaderLength">
            <summary>
            Length of VM2.0 file header. [312]
            </summary>
        </member>
        <member name="F:mKit.Vm2Header.Vm2HeaderLengthLegacy">
            <summary>
            Length of VM2 file header (legacy files) [306]
            </summary>
        </member>
        <member name="F:mKit.Vm2Header.FormatnameLength">
            <summary>
            Length of VM2 volume data format string 
            </summary>
        </member>
        <member name="F:mKit.Vm2Header.maxMinorVersion">
            <summary>
            Maximum minor Version supported [currently 1 for VM2.1]
            </summary>
        </member>
        <member name="M:mKit.Vm2Header.GetVm2HeaderLength(System.Int64)">
            <summary>
            Determine Vm2 header size
            </summary>
            <param name="fileSize">file size [bytes]</param>
            <returns>312, 306 [legacy], or -1 on error</returns>
        </member>
        <member name="P:mKit.Vm2Header.ShapeConfigList">
            <summary>
            ShapeConfig list associated with this volume.
            </summary>
        </member>
        <member name="F:mKit.Vm2Header.shapeConfigClearVolume">
            <summary>
            If false, the drawing of the <see cref="P:mKit.Vm2Header.ShapeConfigList"/> does not clear empty voxels in the volume.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.MinorVersion">
            <summary>
            Minor version number of the VM2 format.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.SectionCount">
            <summary>
            Number of VM2.1 sections in the in-memory instance.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.SectionCountFile">
            <summary>
            Number of VM2.1 sections in the VM2 file.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.TransformRotation">
            <summary>
            Get rotation part from VM2 <see cref="P:mKit.Vm2Header.TransformMatrix"/>, converted to Unity left-handed coordinate system.
            </summary>
        </member>
        <member name="M:mKit.Vm2Header.TrySetFormatNumberFromString(System.String,System.Int32)">
            <summary>
            Try to set <see cref="F:mKit.Vm2Header.formatNumber"/> from a format string and bytes per voxel.
            </summary>
            <param name="format">format string to be examined</param>
            <param name="bytes">corresponding bytes per voxel</param>
            <returns>true if a valid format was detected</returns>
        </member>
        <member name="P:mKit.Vm2Header.BytesPerVoxel">
            <summary>
            Bytes per voxel in the volume data.
            </summary>
        </member>
        <member name="M:mKit.Vm2Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:mKit.Vm2Header.#ctor(mKit.Vm2.FormatEnum,UnityEngine.Vector3,UnityEngine.Vector3,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="format"></param>
            <param name="dataDim"></param>
            <param name="millimeterDim"></param>
            <param name="phases"></param>
        </member>
        <member name="P:mKit.Vm2Header.RowSize">
            <summary>
            Vm2 row size in bytes
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.SliceSize">
            <summary>
            Vm2 single slice size in bytes.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.VolumeSize">
            <summary>
            Vm2 volume size (1 phase) in bytes.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.Vm2Size">
            <summary>
            Vm2 size (all phases) in bytes
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.VolumePhases">
            <summary>
            Number of volume phases in this Vm2.
            </summary>
        </member>
        <member name="M:mKit.Vm2Header.GetDataIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the raw data byte offset for voxel coordinates (x,y,z,t) considering bytes_per_voxel
            </summary>
            <returns>array index</returns>
        </member>
        <member name="P:mKit.Vm2Header.Formatstring">
            <summary>
            Format string space-padded to format string length, see <see cref="F:mKit.Vm2Header.FormatnameLength"/>.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.VoxelDataDimensions">
            <summary>
            Set/Get the voxel data array size
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.TransformMatrix">
            <summary>
            The Vm2 matrix represents a transform in a right-handed coordinate system.
            The matrix values are stored in column-major order with the first four values containing the data of the first matrix column. 
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.MillimeterSize">
            <summary>
            Set/Get the volume extent in millimeters.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.VoxelPerMillimeter">
            <summary>
            Voxel per millimeter for each VM2 data axis.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.MillimeterPerVoxel">
            <summary>
            Millimeter per Voxel for each VM2 data axis.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.SizeInMeters">
            <summary>
            Get the volume extent in meters.
            </summary>
        </member>
        <member name="P:mKit.Vm2Header.MatrixTranslation">
            <summary>
            Set/Get the translation part of the matrix. Z axis is inverted for Untiy left-handed coordinates.
            </summary>
        </member>
        <member name="M:mKit.Vm2Header.FromFile(System.String)">
            <summary>
            Create header instance from file
            </summary>
            <param name="filename"></param>
            <returns>null on failure</returns>
        </member>
        <member name="M:mKit.Vm2Header.ReadFromStream(System.IO.BinaryReader,System.Int64)">
            <summary>
            Read Vm2 header data from stream
            </summary>
            <param name="bstream">BinaryReader stream</param>
        </member>
        <member name="M:mKit.Vm2Header.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writer header to stream.
            </summary>
            <param name="bstream"></param>
        </member>
        <member name="M:mKit.Vm2Header.ToString">
            <summary>
            String with header data information.
            </summary>
            <returns>text</returns>
        </member>
        <member name="M:mKit.Vm2Header.Clone">
            <summary>
            Clone a VM2Header instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2Header.UpdateSectionCount(System.Collections.Generic.Dictionary{mKit.Vm2SectionType,System.Collections.Generic.List{mKit.Vm2Section}})">
            <summary>
            Update the section count in the header.
            </summary>
            <param name="sectionDict"></param>
        </member>
        <member name="T:mKit.Vm2SaveOperation">
            <summary>
            An instance of this class wraps information and state of a Vm2 save request.
            </summary>
        </member>
        <member name="T:mKit.Vm2SaveOperation.OnFinishDelegate">
            <summary>
            Delegate signature for OnFinish delegates.
            </summary>
            <param name="saveOp"></param>
        </member>
        <member name="P:mKit.Vm2SaveOperation.Volume">
            <summary>
            Associated volume control instance.
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.Filename">
            <summary>
            Volume data filename
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.EssFilename">
            <summary>
            ESS filename 
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.Format">
            <summary>
            Vm2 data format for the saved data. When the format differs from source data format, a conversion method from <see cref="T:mKit.Vm2DataConversion"/> is invoked (if available).
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.SliceConversionDelegate">
            <summary>
            Usually the conversion method is decided automatically from the source and desitnation Vm2 <see cref="P:mKit.Vm2SaveOperation.Format"/>.
            With this property a slice conversion delegate can explicitly be set. 
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.SaveESS">
            <summary>
            True if ESS data is saved. 
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.SaveData">
            <summary>
            True if volume data is saved.
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.AsyncSaving">
            <summary>
            True if the requested save operation is asynchronous.
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.Overwrite">
            <summary>
            True if the destination filename can be overwritten. 
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.Success">
            <summary>
            True if the save operation was successful
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.ErrorMessage">
            <summary>
            Error message if the save operation was unsucessful.
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.OnFinish">
            <summary>
            Delegate to be invoked (in any case).
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.WaitForVm2Save">
            <summary>
            Coroutine of the save operation
            </summary>
        </member>
        <member name="M:mKit.Vm2SaveOperation.#ctor(mKit.Volume,System.String,mKit.Vm2.FormatEnum,System.Boolean,System.Boolean,System.Boolean,mKit.Vm2SaveOperation.OnFinishDelegate,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="volumeCtrl">volume</param>
            <param name="filename">Vm2 filename</param>
            <param name="format">vm2 format. Set to NONE for keeping current format.</param>
            <param name="saveESS">set to true to save secondary ESS file</param>
            <param name="asyncSaving">set to false for synchronous operation</param>
            <param name="overwrite">set to true to overwerite existing files.</param>
            <param name="saveData">set to false to save only ESS file</param>
            <param name="onFinish">delegate called if saving has finished</param>
        </member>
        <member name="M:mKit.Vm2SaveOperation.Start">
            <summary>
            Start save operation. This method can only be called once.
            </summary>
        </member>
        <member name="M:mKit.Vm2SaveOperation.CoroutineSaveVm2">
            <summary>
            Internal Coroutine for async saving. Behaves syncronous when saveESS is set to true.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Vm2SaveOperation.WriteVm2Data">
            <summary>
            Write Vm2 data.
            </summary>
        </member>
        <member name="M:mKit.Vm2SaveOperation.SaveESSData">
            <summary>
            Write ESS Texture3D alpha channel data.
            </summary>
        </member>
        <member name="P:mKit.Vm2SaveOperation.Finished">
            <summary>
            True, if the save operation failed or succeded
            </summary>
        </member>
        <member name="M:mKit.Vm2SaveOperation.Abort(System.String)">
            <summary>
            Abort save operation
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:mKit.Vm2Section">
            <summary>
            VM2.1 data section 
            </summary>
        </member>
        <member name="F:mKit.Vm2Section.sectionType">
            <summary>
            Section data type
            </summary>
        </member>
        <member name="F:mKit.Vm2Section.data">
            <summary>
            Data object
            </summary>
        </member>
        <member name="F:mKit.Vm2Section.items">
            <summary>
            Items inside the data object
            </summary>
        </member>
        <member name="F:mKit.Vm2Section.encoding">
            <summary>
            Section encoding
            </summary>
        </member>
        <member name="M:mKit.Vm2Section.#ctor(mKit.Vm2SectionType,System.UInt32,System.Object,mKit.Vm2SectionEncoding)">
            <summary>
            Constructor
            </summary>
            <param name="sectionType"></param>
            <param name="items"></param>
            <param name="data"></param>
            <param name="encoding"></param>
        </member>
        <member name="T:mKit.VolumeTypeEnum">
            <summary>
            Volume type
            </summary>
        </member>
        <member name="F:mKit.VolumeTypeEnum.NONE">
            <summary>
            undefined
            </summary>
        </member>
        <member name="F:mKit.VolumeTypeEnum.MR">
            <summary>
            Volume contains data from MRT modality 
            </summary>
        </member>
        <member name="F:mKit.VolumeTypeEnum.CT">
            <summary>
            Volume contains data from CT modality
            </summary>
        </member>
        <member name="F:mKit.VolumeTypeEnum.RGB">
            <summary>
            Volume conatins RGB data
            </summary>
        </member>
        <member name="T:mKit.MPR_Type">
            <summary>
            Multiplanar reformatting (MPR) type  
            </summary>
        </member>
        <member name="F:mKit.MPR_Type.MPR">
            <summary>
            Multi-planar reformation
            </summary>
        </member>
        <member name="F:mKit.MPR_Type.ThickMPR">
            <summary>
            Thick (slab) MPR (AIP)
            </summary>
        </member>
        <member name="F:mKit.MPR_Type.ThinMIP">
            <summary>
            Thin (slab) MPR (MIP)
            </summary>
        </member>
        <member name="T:mKit.mKitTextureType">
            <summary>
            Volume data type
            </summary>
        </member>
        <member name="F:mKit.mKitTextureType.Type3D">
            <summary>
            Data is stored on GPU in a 3D texture (8-Bit per voxel / channel)
            </summary>
        </member>
        <member name="F:mKit.mKitTextureType.Type2D">
            <summary>
            Data is stored on GPU in a 2D texture (unused)
            </summary>
        </member>
        <member name="F:mKit.mKitTextureType.Type3DFloat">
            <summary>
            Data is stored on GPU in a 3D texture (32-bit per voxel / channel)
            </summary>
        </member>
        <member name="T:mKit.ClipState">
            <summary>
            Clipping state for the volume/slice interaction
            </summary>
        </member>
        <member name="F:mKit.ClipState.NONE">
            <summary>
            No clipping
            </summary>
        </member>
        <member name="F:mKit.ClipState.ABOVE">
            <summary>
            Clipping above slice
            </summary>
        </member>
        <member name="F:mKit.ClipState.BELOW">
            <summary>
            Clipping below slice
            </summary>
        </member>
        <member name="F:mKit.ClipState.BOTH">
            <summary>
            Clipping above and below
            </summary>
        </member>
        <member name="T:mKit.SliceSizeModeEnum">
            <summary>
            Slice sizing mode (used for initial automatic sizing) 
            </summary>
        </member>
        <member name="T:mKit.ShaderDebugFlag">
            <summary>
            Shader debug flag
            </summary>
        </member>
        <member name="T:mKit.MprOutOfDataMode">
            <summary>
            Slice rendering mode for out-of-volume region. 
            </summary>
        </member>
        <member name="T:mKit.SliceEdgeEnum">
            <summary>
            Slice edge indicator location
            </summary>
        </member>
        <member name="T:mKit.IndicatorShapeEnum">
            <summary>
            Slice edge indicator type
            </summary>
        </member>
        <member name="T:mKit.TextureGeneratorStateEnum">
            <summary>
            Texture generation state
            </summary>
        </member>
        <member name="T:mKit.UltrasoundScannerTypeEnum">
            <summary>
            Ultrasound scanner type.
            </summary>
        </member>
        <member name="T:mKit.SliceOrientation">
            <summary>
            Slice orientation used in the 3-slice toolgroup
            </summary>
        </member>
        <member name="T:mKit.VolumeStateEnum">
            <summary>
            Control instance states
            </summary>
        </member>
        <member name="T:mKit.CompositingMode">
            <summary>
            The following modes are defined:
            ALPHABLEND - alpha blending function with contrast enhancement
            RGBA - RGB with blending weight from alpha channel
            MIP - Maximum Intensity Projection
            STANDARD_TEXTURE - like ALPHABLEND, plus a texture as LUT
            CUSTOM_TEXTURE - a custom blending function, plus a texture as LUT (not yet implemented)
            VISIBLEHUMAN - builtin RGB transfer function 
            See also <see cref="T:mKit.PresentationParameters"/> which gets passed to GPU shader in <see cref="T:mKit.ProxyGeometry"/>.
            
            DeveloperNote: when adding new modes, add name also to shader multi_compile line.
            
            </summary>
        </member>
        <member name="F:mKit.CompositingMode.ALPHABLEND">
            <summary>
            Alpha blending of voxel colors (default)
            </summary>
        </member>
        <member name="F:mKit.CompositingMode.MIP">
            <summary>
            Maxium intensity projection
            </summary>
        </member>
        <member name="F:mKit.CompositingMode.TEXTURE1">
            <summary>
            Use a Texture2D as look-up table (LUT) to map volume intensities to colors.
            </summary>
        </member>
        <member name="F:mKit.CompositingMode.VISIBLEHUMAN">
            <summary>
            Use a transfer function suitable for the Visible Human dataset
            </summary>
        </member>
        <member name="F:mKit.CompositingMode.AIP">
            <summary>
            Average intensity projection
            </summary>
        </member>
        <member name="T:mKit.Volume">
            <summary>
            Control provides most of the mKit-API and event dispatching. Each volume dataset is controlled by a Control instance.
            
            To load volume data, use the static method <see cref="M:mKit.Volume.AddVolume(System.String,mKit.Volume.OnVolumeReadyDelegate)"/> and provide a callback delegate to do initialization.
            
            </summary>
        </member>
        <member name="F:mKit.Volume.finalizeList">
            <summary>
            Buffers put on this list will be released, if necessary.
            </summary>
        </member>
        <member name="P:mKit.Volume.Volumes">
            <summary>
            List of active volume Control instances.
            </summary>
        </member>
        <member name="P:mKit.Volume.Vm2">
            <summary>
            The data source Vm2 instance.
            </summary>
        </member>
        <member name="T:mKit.Volume.VolumeCacheItem">
            <summary>
            Cache item. Internally used with <see cref="F:mKit.Config.TransparentVolumeDataCaching"/> enabled.
            </summary>
        </member>
        <member name="F:mKit.Volume.VolumeCacheItem.vm2">
            <summary>
            Source Vm2 instance
            </summary>
        </member>
        <member name="F:mKit.Volume.VolumeCacheItem.textureData">
            <summary>
            Texture data instance
            </summary>
        </member>
        <member name="M:mKit.Volume.VolumeCacheItem.#ctor(mKit.Vm2,mKit.TextureData)">
            <summary>
            Constructor
            </summary>
            <param name="_vm2"></param>
            <param name="_textureData"></param>
        </member>
        <member name="F:mKit.Volume.ID">
            <summary>
            Unique instance id.
            </summary>
        </member>
        <member name="P:mKit.Volume.ActiveTextureData">
            <summary>
            Currently used <see cref="T:mKit.TextureData"/>.
            </summary>
        </member>
        <member name="M:mKit.Volume.GetImagerCore">
            <summary>
            Get the instance loading mKit core assets. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.InitMKit">
            <summary>
            Initializes MKit 
            </summary>
        </member>
        <member name="M:mKit.Volume.ExitMKit(System.Boolean)">
            <summary>
            Cleanup static data.
            </summary>
        </member>
        <member name="M:mKit.Volume.Init2">
            <summary>
            the singleton instance
            </summary>
        </member>
        <member name="E:mKit.Volume.NotifyVm2Loading">
            <summary>
            Event handler which notifies that new VM2 data has been loaded.
            See <see cref="T:mKit.Events.Vm2EventArgs"/> for event data.
            </summary>
        </member>
        <member name="E:mKit.Volume.NotifyVolumeTexCreated">
            <summary>
            Event handler which notifies the successfull creation of a new volume texture.
            See <see cref="T:mKit.Events.VolumeTextureEventArgs"/> for event data.
            </summary>
        </member>
        <member name="P:mKit.Volume.ActiveInHierarchy">
            <summary>
            For the <see cref="P:mKit.Volume.VolumeProxy"/>, a thread-safe version of GameObject.ActiveInHierarchy.
            Set from <see cref="M:mKit.Volume.VolumeUpdate"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.CurrentToolgroupState">
            <summary>
            Returns the current toolgroup state object. 
            Use <see cref="P:mKit.Volume.IsCurrentToolgroupValid"/> to check if it exists.
            </summary>
        </member>
        <member name="P:mKit.Volume.Vm2DataLoadingProgess">
            <summary>
            Disk loading progress object. Updated while volume state equals <see cref="F:mKit.VolumeStateEnum.LOADING"/>. 
            </summary>
        </member>
        <member name="P:mKit.Volume.Vm2DataConversionProgress">
            <summary>
            Texture conversion progress object. Updated after data is loaded from disk and volume state equals <see cref="F:mKit.VolumeStateEnum.LOADING"/>. 
            </summary>
        </member>
        <member name="P:mKit.Volume.SliceShowTransparentBlack">
            <summary>
            For the transparent slice shader, the Color(0,0,0,0) is rendered as Color (0,0,0,1) when true.
            </summary>
        </member>
        <member name="P:mKit.Volume.SliceMaskingTexture">
            <summary>
            Alpha mask texture applied to oblique slices. Used only when <see cref="P:mKit.Volume.UseSliceMasking"/>"/> is set to true.
            In the slice shader, the resulting color is: lerp(ls.color, float4(1,1,1,0), maskColor.a);
            </summary>
        </member>
        <member name="P:mKit.Volume.SliceRenderDynamicResolution">
            <summary>
            If true, the render texture dimensions reflect the slice aspect ratio (cp. <see cref="M:mKit.Volume.SetToolSize(UnityEngine.Vector2)"/>).
            If false (default), the slice render texture is quadratic. For this case, the edge length in pixels equals <see cref="P:mKit.Volume.SliceRenderTextureWidth"/>. 
            Note: If true, and when using <see cref="M:mKit.Volume.SetToolSize(UnityEngine.Vector2)"/>, the used RenderTexture instance is renewed (cp. <see cref="M:mKit.Volume.GetSliceRenderTexture(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.SliceRenderTextureWidth">
            <summary>
            Slice render texture width. Initialized with <see cref="F:mKit.Config.DefaultRenderTextureWidth"/>.
            The render texture height can be either equal or may honor slice aspect ratio, cp. <see cref="P:mKit.Volume.SliceRenderDynamicResolution"/>.
            Changing(settting) this property is only effective, if <see cref="P:mKit.Volume.SliceRenderDynamicResolution"/> is set to true and then <see cref="M:mKit.Volume.SetToolSliceSize(UnityEngine.Vector2,System.Int32)"/> must be called.
            </summary>
        </member>
        <member name="P:mKit.Volume.SliceSizeMode">
            <summary>
            Determin how the rendertexture size is initialized. Defaults to <see cref="F:mKit.Config.DefaultSliceSizeMode"/>.
            </summary>
        </member>
        <member name="M:mKit.Volume.GetSliceSnapshot(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Get a snapshot from the slice render-texture as Texture2D. 
            Note: the snapshot is copied on the GPU. To process texture data on the CPU, use Texture2D.GetPixels(). 
            Note: returned texture instances can be supplied here as parameters for re-use. 
            </summary>
            <param name="snapshotTexture">optional snapshot Texture2D (content will be overwritten). 
            Must have same dimensions as slice render texture, <see cref="M:mKit.Volume.GetSliceRenderTextureWidth(System.Int32)"/>
            and <see cref="M:mKit.Volume.GetSliceRenderTextureHeight(System.Int32)"/>.</param>
            <param name="sliceIndex">toolgroup slice index</param>
            <returns>a new Texture2 instance, or the texture supplied as parameter.</returns>
        </member>
        <member name="M:mKit.Volume.GetSliceRenderTextureWidth(System.Int32)">
            <summary>
            Current render texture width for the slice image.
            </summary>
            <param name="sliceIndex">slice index in toolgroup.</param>
            <returns>pixel width</returns>
        </member>
        <member name="M:mKit.Volume.GetSliceRenderTextureHeight(System.Int32)">
            <summary>
            Current render texture height for the slice image.
            </summary>
            <param name="sliceIndex">slice index in toolgroup.</param>
            <returns>pixel height</returns>
        </member>
        <member name="M:mKit.Volume.GetTransferFunctionFloatParameter(System.Int32)">
            <summary>
            Get a multi-purpose transfer function float parameter.
            For more information, see <see cref="M:mKit.Volume.SetTransferFunctionFloatParameter(System.Int32,System.Single)"/> 
            </summary>
        </member>
        <member name="M:mKit.Volume.GetUltrasoundTexture2D(System.Int32)">
            <summary>
            For US mode, returns the Texture2D visible on the slice.
            </summary>
            Returns null, if a render texture is used (cp. <see cref="P:mKit.Volume.UltrasoundUseRendertexture"/>).
            In that case, use <see cref="M:mKit.Volume.GetUltrasoundRendertexture(System.Int32)"/>.
            <param name="index"></param>
            <returns>Texture2D</returns>
        </member>
        <member name="M:mKit.Volume.GetUltrasoundRendertexture(System.Int32)">
            <summary>
            For US mode, returns the RenderTexture visible on the slice.
            To check if a render texture is used, cp. <see cref="P:mKit.Volume.UltrasoundUseRendertexture"/>.
            If not, use instead <see cref="M:mKit.Volume.GetUltrasoundTexture2D(System.Int32)"/>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.SetTransferFunctionFloatParameter(System.Int32,System.Single)">
            <summary>
            Set a multi-purpose transfer function float parameter.
            Used with compositing mode <see cref="F:mKit.CompositingMode.VISIBLEHUMAN2"/>:
            index 0: transparency factor for unselected volume voxels.
            index 1: 
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:mKit.Volume.TransparentSlices">
            <summary>
            Currently unused. Returns always true.
            </summary>
        </member>
        <member name="P:mKit.Volume.TransferFunctionTexture">
            <summary>
            Set/get transfer function LUT encoded as texture, for slice/slab/volume.
            </summary>
        </member>
        <member name="P:mKit.Volume.TransferFunctionTextureSlice">
            <summary>
            Set/get transfer function LUT encoded as texture, for the slice only.
            </summary>
        </member>
        <member name="P:mKit.Volume.TransferFunctionTextureVolume">
            <summary>
            Set/get transfer function LUT encoded as texture, for the volume only.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeTextureFilterMode">
            <summary>
            Set the FilterMode of the volume texture. 
            Set to FilterMode.POINT if the texture contains discrete values or Trilinear otherwise.
            </summary>
        </member>
        <member name="P:mKit.Volume.IsCurrentToolgroupValid">
            <summary>
            Returns true if the current toolgroup state object exists.
            </summary>
        </member>
        <member name="M:mKit.Volume.MatchSlice(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Compares distance between target slice transform and another slice transform by projecting the target ROI rectangle onto the second slice.
            </summary>
            <param name="target">1st transform</param>
            <param name="t2">2nd transform</param>
            <param name="targetRoiMin">ROI in the slice XZ plane (minimum in meters)</param>
            <param name="targetRoiMax">ROI in the slice XZ plane (maximum meters)</param>
            <param name="distanceTolerance">allowed distance tolerance (meters)</param>
            <returns>true if compared transforms are below distance tolerance (ROI corners)</returns>
        </member>
        <member name="M:mKit.Volume.MatchSlice(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
            <summary>
            Compares distance between target slice transform and another slice transform by projecting the target ROI rectangle onto the second slice.
            </summary>
            <param name="targetPosition">1st transform</param>
            <param name="targetRotation"></param>
            <param name="targetNormal"></param>
            <param name="targetSize"></param>
            <param name="targetRoiMin">ROI in the slice XZ plane (minimum in meters)</param>
            <param name="targetRoiMax">ROI in the slice XZ plane (maximum in meters)</param>
            <param name="position">2nd transform</param>
            <param name="rotation"></param>
            <param name="normal"></param>
            <param name="distanceTolerance">allowed distance tolerance (meters)</param>
            <returns>true if compared rotations are below angle tolerance and slice corner distances are below distance tolerance</returns>
        </member>
        <member name="P:mKit.Volume.MetersPerUnit">
            <summary>
            Meters per Unity3D unit
            </summary>
        </member>
        <member name="P:mKit.Volume.MillimetersPerUnit">
            <summary>
            Millimeters per Unity3D unit
            </summary>
        </member>
        <member name="P:mKit.Volume.MultiVolumeSliceRendering">
            <summary>
            Check if the <see cref="T:mKit.MultiVolumeSliceRenderer"/> is active on slice.
            To set, use <see cref="M:mKit.Volume.SetMultiVolumeSliceRenderer(System.Int32,System.Boolean)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.SetMultiVolumeSliceRenderer(System.Int32,System.Boolean)">
            <summary>
            Adds a component to the slice which renders all active volumes in the slice plane.
            Note: add this component only to one slice to optimize performance.
            </summary>
            <param name="sliceIndex">slice index</param>
            <param name="state">true to add component, false to remove component</param>
            <returns>true if the component was actually added or removed</returns>
        </member>
        <member name="P:mKit.Volume.PartialClipping">
            <summary>
            With clipping turned on, either full half spaces are clipped or only the part above/below the area of the clipping quad.
            Default: true (partial clipping). Set to false to clip full half space.
            </summary>
        </member>
        <member name="P:mKit.Volume.SamplerateFactor">
            <summary>
            Adjust the samplerate factor between 0.5x (minimum) and 3x (maximum).
            A factor of 1x matches the minimum voxel distance of the volume data.
            </summary>
        </member>
        <member name="P:mKit.Volume.ScaleNonUniform">
            <summary>
            Volume scale in x/y/z direction. By default every component equals 1, to render the volume in its original size specified in the Vm2 data (cp. <see cref="P:mKit.Vm2Header.SizeInMeters"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.Scale">
            <summary>
            Set uniform Scale factor of volume and toolgroup. 
            For retrieving the current scale, use <see cref="P:mKit.Volume.ScaleNonUniform"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.LongestEdge">
            <summary>
            Longest edge of volume (millimeters).
            </summary>
        </member>
        <member name="P:mKit.Volume.TextureMode">
            <summary>
            Change volume storage mode.
            </summary>
        </member>
        <member name="P:mKit.Volume.WindowLevelVolume">
            <summary>
            Get/set normalized window level between 0 and 1 for the volume.
            </summary>
        </member>
        <member name="P:mKit.Volume.WindowWidthVolume">
            <summary>
            Get/set normalized window width between 0 and 1 for the volume.
            </summary>
        </member>
        <member name="P:mKit.Volume.WindowLevelSlice">
            <summary>
            Get/set normalized window level between 0 and 1 for the slice.
            </summary>
        </member>
        <member name="P:mKit.Volume.WindowWidthSlice">
            <summary>
            Get/set normalized window width between 0 and 1 for the slice.
            </summary>
        </member>
        <member name="P:mKit.Volume.WindowLevel">
            <summary>
            Get/set normalized window level for volume and slice (range between 0 and 1).
            </summary>
        </member>
        <member name="P:mKit.Volume.WindowWidth">
            <summary>
            Get/set normalized window width for volume and slice (range between 0 and 1).
            </summary>
        </member>
        <member name="P:mKit.Volume.Threshold">
            <summary>
            Get/set normalized intensity threshold between 0 and 1 used for volume sampling.
            </summary>
        </member>
        <member name="P:mKit.Volume.ThresholdAlpha">
            <summary>
            Get/set normalized RGBA alpha threshold between 0 and 1 used for volume sampling.
            Only used with compositing mode <see cref="F:mKit.CompositingMode.RGBA"/>. 
            </summary>
        </member>
        <member name="P:mKit.Volume.UseSurfaceNormal">
            <summary>
            Rendering option: If true, a surface normal is estimated at a voxel location.
            Currently only used for compositing mode TEXTURE1.
            </summary>
        </member>
        <member name="P:mKit.Volume.OutOfDataVisualMode">
            <summary>
            Set the mode for visualizing out-of-data pixels in the MPR slice.
            </summary>
        </member>
        <member name="P:mKit.Volume.PhaseCount">
            <summary>
            The number of phases in the loaded Vm2.
            </summary>
        </member>
        <member name="P:mKit.Volume.OutOfDataColor1">
            <summary>
            Set a color for <see cref="F:mKit.MprOutOfDataMode.COLOR"/> or <see cref="F:mKit.MprOutOfDataMode.SPHERE"/>
            </summary>
        </member>
        <member name="P:mKit.Volume.OutOfDataColor2">
            <summary>
            Set a color for  <see cref="F:mKit.MprOutOfDataMode.SPHERE"/>
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundTexRenderer">
            <summary>
            Sets ultrasound texture renderer delegate
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundRenderer">
            <summary>
            Ultrasound rendering instance.
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundUseRendertexture">
            <summary>
            If true, a RenderTexture will be created for US  (default: Texture2D).
            To change the default, set <see cref="F:mKit.Config.UltrasoundGenerateInRenderTexture"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundRenderTextureFormat">
            <summary>
            The format used with <see cref="P:mKit.Volume.UltrasoundUseRendertexture"/>=true.
            For default format, see <see cref="F:mKit.Config.UltrasoundRenderTextureFormat"/>
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundRenderTextureColorspaceConversion">
            <summary>
            The color space conversion used with <see cref="P:mKit.Volume.UltrasoundUseRendertexture"/>=true.
            For default conversion, see <see cref="F:mKit.Config.UltrasoundRenderTextureColorspaceConversion"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.UseScreenSpaceLimit">
            <summary>
            In VR it helps rendering performance when volumes are not rendered in screen areas that are not visible in the headset.
            Configurable through <see cref="P:mKit.Volume.VisibleScreenSpaceUV"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.VisibleScreenSpaceUV">
            <summary>
            Define limits of screen space rendering by setting visible/invisible ratio.
            To enable, set <see cref="P:mKit.Volume.UseScreenSpaceLimit"/> to true.
            The .x component sets the horizontal, the .y component the vertical ratio of visible screen space.
            Example: with a value of 0.8f, rendering is done in the center 80 percent of screen space with 10% on each margin spared.
            </summary>
        </member>
        <member name="P:mKit.Volume.UseSliceMasking">
            <summary>
            (De-)Activates a mask texture on the oblique slices.
            </summary>
        </member>
        <member name="P:mKit.Volume.UseUltrasoundSliceMasking">
            <summary>
            (De-)Activates a mask texture on ultrasound slices.
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundScannerType">
            <summary>
            The type of ultrasound scanner/transducer/probe determines the course of sonic rays.
            </summary>
        </member>
        <member name="P:mKit.Volume.UseUltrasound">
            <summary>
            (De-)Activates the Ultrasound visualization.
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundVisualization">
            <summary>
            Obsolete: remove references to this property. 
            </summary>
        </member>
        <member name="P:mKit.Volume.UltrasoundShadowThreshold">
            <summary>
            Set/get the ultrasound shadow threshold (0-255 for the default CPU US renderer).
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeAnimation">
            <summary>
            Set to true to animate 4D volumes. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeLoaderBusy">
            <summary>
            If true, a volume loading operation is in progress.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeReadyAll">
            <summary>
            If true, all active volume slots are either empty or in <see cref="F:mKit.VolumeStateEnum.READY"/> state.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeSize">
            <summary>
            Returns the native (i.e. non-scaled, non-ROI) volume extent in Unity units (default: meters).
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeSizeScaled">
            <summary>
            Returns <see cref="P:mKit.Volume.VolumeSize"/> as affected by <see cref="P:mKit.Volume.ScaleNonUniform"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeSizeScaledROI">
            <summary>
            Returns <see cref="P:mKit.Volume.ROIsize"/> as affected by <see cref="P:mKit.Volume.ScaleNonUniform"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeType">
            <summary>
            Volume type
            </summary>
        </member>
        <member name="P:mKit.Volume.ToolgroupProxy">
            <summary>
            GameObject root of the toolgroup proxy geometry
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumePhase">
            <summary>
            For 4D volumes the visible volume phase. Returns 0 for 3D volumes.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeProxy">
            <summary>
            Transform of the volume proxy geometry
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeProxyExtent">
            <summary>
            Scale of volume proxy geometry.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeDataSize">
            <summary>
            Data dimensions of the raw volume data (voxels).
            
            Note: x/y/z axis correspond to VM2 data without Dicom rotation, i.e. (x,y) are slice dimensions and z the image stack depth.  
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumePhysicalSize">
            <summary>
            Physical dimensions of the raw volume data (millimeters).
            
            Note: x/y/z axis correspond to VM2 data without Dicom rotation, i.e. (x,y) are slice dimensions and z the image stack depth.  
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeDicomOrthoSize">
            <summary>
            Volume size (Dicom patient space), in meters. Only valid for volumes with axis-parallel orientation.
            </summary>
        </member>
        <member name="P:mKit.Volume.IsOrthoDicom">
            <summary>
            Returns true if in Dicom space the data axes are identical or orthogonal to world space axes.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeExtents">
            <summary>
            Volume extent (patient space), in meters. Only valid for volumes with axis-parallel orientation. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeDicomDataOrthoSize">
            <summary>
            Volume data size (patient space), in voxels. Only valid for volumes with axis-parallel orientation. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeVoxelDicomDistance">
            <summary>
            Distance of voxels (Dicom patient space), in meters. Only valid for volumes with axis-parallel orientation. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeState">
            <summary>
            Current volume state. Setting of this property will notify <see cref="E:mKit.Volume.OnVolumeStateChanged"/> event subscribers.
            </summary>
        </member>
        <member name="M:mKit.Volume.SetVolumeState(mKit.VolumeStateEnum)">
            <summary>
            Allows to set state during GPU update operations, e.g. from <see cref="M:mKit.ArtificialVolume.CreateShapesOnGPU(mKit.Volume,mKit.TextureData)"/>
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:mKit.Volume.VolumeWorldDefault">
            <summary>
            Default Transform of volume in world space. Parent transform of <see cref="P:mKit.Volume.VolumeDicom"/>.
            For example, this transform can be used to bring the patient into a 'upright' position. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeDicom">
            <summary>
            Transform of volume data with Dicom rotation applied.
            The Dicom patient-based reference coordinate system orients the volume data with +z going to the patient's head, +x to the patient's left and +y to the patient's back.
            Since the Dicom coordinate system is right-handed, but Unity left-handed, this transform lets the patients head point to minus z.
            </summary>
        </member>
        <member name="P:mKit.Volume.ToolgroupIsLocal">
            <summary>
            If set the toolgroup transform is treated as local to the volume. This is the default.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeWorldSpace">
            <summary>
            The transform of the volume in Unity world space.
            If <see cref="F:mKit.Config.CollapseVolumeHierarchy"/> is set to true, this transform's rotation includes Dicom transformation.  
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeWorldSpaceDefaultRotation">
            <summary>
            Initial rotation applied after Dicom transformation.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeWorldSpaceDefaultPosition">
            <summary>
            Initial position applied after Dicom transformation.
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeWorldSpaceRotation">
            <summary>
            Returns the volume world space rotation including 'default'(usually upright) rotation but without Dicom rotation. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeDicomRotation">
            <summary>
            Data-to-RCS rotation (cp. DICOM ImageOrientationPatient)  
            </summary>
        </member>
        <member name="M:mKit.Volume.OnDestroy">
            <summary>
            Clean up (for example upon unloading the scene)
            </summary>
        </member>
        <member name="P:mKit.Volume.OnVolumeUpdateProcessTransform">
            <summary>
            Set a delegate method which gets the volume transform as parameter. Executed during Control.Update(). 
            </summary>
        </member>
        <member name="P:mKit.Volume.UnsubscribeEventsOnSceneUnload">
            <summary>
            Sets the scene load policy for event subscriptions.
            IF set to true, all event observers are unsubscribed before loading a new scene (default).
            When setting this to false, make shure that:
            - event observers duly unsubscribe themselves
            - or survive by marking them with DontDestroyOnLoad().
            </summary>
        </member>
        <member name="M:mKit.Volume.UnsubscribeAllEventHandlers">
            <summary>
            Clear invocation lists of publicly avaible event. 
            </summary>
        </member>
        <member name="P:mKit.Volume.AutoGenerateTexture">
            <summary>
            Wheter to automatically generate a volume texture upon new or changed Vm2 data.
            Default: true. 
            Set to false before doing a sequence of data generation / editing tasks and call <see cref="M:mKit.Volume.GenerateTexture"/> to conclude. 
            </summary>
        </member>
        <member name="M:mKit.Volume.DataNotify(mKit.Vm2)">
            <summary>
            Internal new data notification sent from <see cref="P:mKit.Volume.Vm2" /> instance.
            </summary>
            <param name="newVm2">the new vm2 instance</param>
        </member>
        <member name="M:mKit.Volume.Coroutine_WaitForDataConverter">
            <summary>
            Coroutine waiting for the static <see cref="P:mKit.DataConverter.DataConverterBusy"/> flag to become false.
            After that the next texture generation is done via <see cref="M:mKit.Volume.SetTextureMode(mKit.mKitTextureType,System.Boolean)"/>. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.ReleaseResources">
            <summary>
            Release Resources. Called before new VM2 data is being processed.
            </summary>
        </member>
        <member name="M:mKit.Volume.DataNotify(mKit.TextureData)">
            <summary>
            New Texture notification from <see cref="T:mKit.DataConverter" />
            </summary>
            <param name="textureData"></param>
        </member>
        <member name="M:mKit.Volume.SetupProxyGeometry">
            <summary>
            Create GameObjects for volume and toolgroup 
            </summary>
        </member>
        <member name="M:mKit.Volume.SetLayer(UnityEngine.Transform,System.Int32)">
            <summary>
            Apply gameobject layer to transform hierarchy.
            </summary>
            <param name="transform"></param>
            <param name="layer"></param>
        </member>
        <member name="P:mKit.Volume.ActiveVolumesCount">
            <summary>
            The currently active volumes (cached volumes not included) in READY state.
            </summary>
        </member>
        <member name="M:mKit.Volume.ActivateToolgroupSlice(System.Int32,System.Boolean)">
            <summary>
            Activates slice i of the currently active Toolgroup
            </summary>
            <param name="i">index</param>
            <param name="state">on or off</param>
        </member>
        <member name="M:mKit.Volume.ActivateToolgroupSlice1(System.Boolean)">
            <summary>
            Convenience method for GUI toggle
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:mKit.Volume.ActivateToolgroupSlice2(System.Boolean)">
            <summary>
            Convenience method for GUI toggle
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:mKit.Volume.ActivateToolgroupSlice3(System.Boolean)">
            <summary>
            Convenience method for GUI toggle
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:mKit.Volume.SetVm2Filename(System.String)">
            <summary>
            Set filename used when saving volume data (must end with <see cref="F:mKit.Config.Vm2Extension"/>).
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:mKit.Volume.GenerateVm2(mKit.Vm2Header,mKit.Vm2.GenerateVm2Data,mKit.Volume.OnVolumeReadyDelegate,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Vm2 instance for this <see cref="T:mKit.Volume"/>instance and generates data using a delegate.
            </summary>
            <param name="h">instance of <see cref="T:mKit.Vm2Header" /> setting Vm2 parameters</param>
            <param name="generateData">a delegate operating on the Vm2 instance (possibly using <see cref="M:mKit.Vm2.SetVoxel(System.Int32,System.Int32,System.Int32,UnityEngine.Color32,System.Int32)"/>)</param>
            <param name="onVolumeReadyDelegate">delegate for procedural volume generation</param>
            <param name="generateTexture"></param>
            <param name="allocateHostMemory">if false, no host memory is allocated</param>
        </member>
        <member name="M:mKit.Volume.LoadVm2(mKit.Vm2,mKit.Volume.OnVolumeReadyDelegate,System.Boolean)">
            <summary>
            Load existing Vm2 instance to GPU.
            </summary>
            <param name="vm2"></param>
            <param name="onVolumeReadyDelegate"></param>
            <param name="generateTexture"></param>
        </member>
        <member name="M:mKit.Volume.EditVm2(mKit.Vm2.GenerateVm2Data,System.Boolean)">
            <summary>
            Edit Vm2 data with a delegate method.
            </summary>
            <param name="editDataDelegate">delegate method operating on Vm2 instance</param>
            <param name="generateTexture">If true, host data will be uploaded to GPU</param>
        </member>
        <member name="M:mKit.Volume.EditGpuData(mKit.Volume.GenerateGpuData,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Edit GPU data of active volume instance.
            </summary>
            <param name="generateGpuData"></param>
            <param name="onVolumeReadyDelegate"></param>
        </member>
        <member name="P:mKit.Volume.ESSLevels">
            <summary>
            The ESS (empty space skipping) levels to use. To turn off ESS, set to zero.
            To get the maximum available level for this volume, <see cref="P:mKit.Volume.ESSLevelsAvailable"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.ESSLevelsAvailable">
            <summary>
            Number of ESS (empty space skipping) levels generated or read from disk.
            </summary>
        </member>
        <member name="M:mKit.Volume.GenerateDemoGridVm2">
            <summary>
            Generate a demo grid-like vm2
            </summary>
        </member>
        <member name="M:mKit.Volume.GenerateTexture">
            <summary>
            (Re-)generate GPU volume texture from Vm2 data.
            </summary>
        </member>
        <member name="M:mKit.Volume.GetClippingMode">
            <summary>
            Gets wheter clipping is enabled.
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:mKit.Volume.GetIndicatorTransform(System.Int32)">
            <summary>
            Get the transform of the configured indicator instance belonging to a slice of the toolgroup.
            </summary>
            <param name="sliceIndex">index of the slice</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetToolSliceOffset(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.Int32)">
            <summary>
            Get an slice-local offset to the slice center composed from a slice-local position plus an additional slice-local offset.
            </summary>
            <param name="offset">offset</param>
            <param name="sliceLocalPosition">local coordinates on the slice</param>
            <param name="offsetUnitMillimeter">set to true if the supplied offset parameter is in millimeters</param>
            <param name="sliceIndex">slice index</param>
        </member>
        <member name="M:mKit.Volume.GetToolSliceSizeDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:mKit.Volume.GetMprSliceNo(mKit.SliceOrientation,UnityEngine.Vector3)">
            <summary>
            Get computed MPR slice no. Returns value between 0 and a component of <see cref="P:mKit.Volume.VolumeDicomDataOrthoSize"/> minus 1.
            Note: Only valid for volumes with axis-parallel orientation! 
            </summary>
            <param name="sliceOrientation">slice orientation in Dicom RCS</param>
            <param name="positionInVolume">a volume-local position obtained through <see cref="M:mKit.Volume.GetToolPositionInVolume(System.Int32)"/></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.SetMprSliceNo(mKit.SliceOrientation,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set tool position in volume to the position of a certain slice. 
            </summary>
            <param name="sliceOrientation"></param>
            <param name="sliceNo"></param>
            <param name="toolgroupSliceIndex"></param>
            <param name="allowOutside"></param>
        </member>
        <member name="M:mKit.Volume.GetThresholdNormalized">
            <summary>
            Gets the normalized visual threshold. 
            </summary>
            <returns>threshold as value between 0.0f and 1.0f</returns>
        </member>
        <member name="M:mKit.Volume.GetSliceRenderTexture(System.Int32)">
            <summary>
            The slice RenderTexture is target of a camera facing to the slice.
            </summary>
            <param name="sliceIndex">slice index</param>
            <returns>RenderTexture</returns>
        </member>
        <member name="M:mKit.Volume.GetToolRenderTexture(System.Int32)">
            <summary>
            A tool slice RenderTexture is the target of a camera facing to the slice.
            </summary>
            <param name="sliceIndex">slice index</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetToolgroupCamera(System.Int32)">
            <summary>
            Get the camera observing the slice quad.
            </summary>
            <param name="sliceIndex">slice index (default: 0)</param>
        </member>
        <member name="M:mKit.Volume.GetToolModelTransform">
            <summary>
            Returns the transform of the tool model hierarchy. 
            </summary>
            <returns>Unity Transform object. Usually only local values are used.</returns>
        </member>
        <member name="M:mKit.Volume.GetToolSliceMesh(System.Int32)">
            <summary>
            Returns the transform of the geometry of the slice plane.
            Note that the untransformed/unscaled mesh has size 1x1 in the XZ plane
            and therefore does not correspond to any Unity primitive (neither quad nor plane).  
            </summary>
            <param name="index">slice index</param>
            <returns>transform</returns>
        </member>
        <member name="M:mKit.Volume.GetToolSliceRenderer(System.Int32)">
            <summary>
            Get the slice renderer.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetToolPlane(System.Int32)">
            <summary>
            Returns the transform of the scene geometry of the slice plane. 
            </summary>
            <param name="index">slice index</param>
            <returns></returns>
            [Obsolete("Use GetToolSliceMesh instead.")]
        </member>
        <member name="M:mKit.Volume.GetToolSize(System.Int32)">
            <summary>
            Returns the (x,y) size of the tool.
            </summary>
            <param name="sliceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetToolSliceState(System.Int32)">
            <summary>
            Returns the state of a single toolgroup slice
            </summary>
            <param name="index">slice no.</param>
            <returns>true for on, false for off</returns>
        </member>
        <member name="M:mKit.Volume.GetToolSliceTransform(System.Int32)">
            <summary>
             Returns the transform for one of the tool's slices. 
            </summary>
            <param name="sliceIndex">slice no.</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetVolumeModelInverse">
            <summary>
            This matrix is used by shaders to get coordinates axis-aligned to vm2/texture space.
            </summary>
            <returns>matrix</returns>
        </member>
        <member name="M:mKit.Volume.GetToolTransform">
            <summary>
            Gets the global tool transformation.
            </summary>
            <returns>Tramsform</returns>
        </member>
        <member name="P:mKit.Volume.ToolTransform">
            <summary>
            Returns the global tool transformation.
            </summary>
        </member>
        <member name="M:mKit.Volume.GetVolumeTransform">
            <summary>
            Gets the volume transformation.
            </summary>
            <returns>transformation matrix</returns>
        </member>
        <member name="P:mKit.Volume.VolumeTransform">
            <summary>
            Returns the volume transformation.
            </summary>
        </member>
        <member name="M:mKit.Volume.GetVolumeByLayer(System.Int32)">
            <summary>
            Return the first volume visible on specified layer number.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetVoxelByteInVolume(UnityEngine.Vector3,System.Int32)">
            <summary>
            Get voxel intensity value at a local volume position as 8 bit value.
            The local positions correspond to those from <see cref="M:mKit.Volume.GetToolPositionInVolume(System.Int32)"/> (unscaled=true) and <see cref="M:mKit.Volume.SetToolPositionInVolume(UnityEngine.Vector3,System.Int32,System.Boolean)"/>.
            </summary>
            <param name="localPosition">localPosition</param>
            <param name="phase">volume phase (default:0)</param>
            <returns>intensity value</returns>
        </member>
        <member name="M:mKit.Volume.LocalToVoxelPosition(UnityEngine.Vector3,System.Int32)">
            <summary>
            Convert a local position of the volume to a voxel data position.
            The local positions correspond to those from <see cref="M:mKit.Volume.GetToolPositionInVolume(System.Int32)"/> (unscaled=true) and <see cref="M:mKit.Volume.SetToolPositionInVolume(UnityEngine.Vector3,System.Int32,System.Boolean)"/>.
            </summary>
            <param name="localPosition"></param>
            <param name="phase"></param>
            <returns>Nullable Vector3Int - contains null, if the position is outside the volume.</returns>
        </member>
        <member name="M:mKit.Volume.WorldToVoxelPosition(UnityEngine.Vector3,System.Int32)">
            <summary>
            Convert a world position of the volume to a voxel data position.
            </summary>
            <param name="worldPosition"></param>
            <param name="phase"></param>
            <returns>Nullable Vector3Int - contains null, if the position is outside the volume.</returns>
        </member>
        <member name="M:mKit.Volume.GetVoxelRGB(UnityEngine.Vector3,System.Int32)">
            <summary>
            The world position is projected into volume voxel data, to get a Color32 value at the specified position.
            </summary>
            <param name="worldPosition">position (can be outside the volume)</param>
            <param name="phase">volume phase</param>
            <returns>Color value derived from volume voxel data, or Color.clear if the position is outside the volume.</returns>
        </member>
        <member name="M:mKit.Volume.GetGpuVoxelRGB(UnityEngine.Vector3,System.Int32)">
            <summary>
            Get a GPU voxel using a compute shader
            </summary>
            <param name="worldPosition"></param>
            <param name="phase"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetWindowNormalized">
            <summary>
            Gets the normalized window level and width.
            </summary>
            <returns>window level in x component, window width in y component</returns>
        </member>
        <member name="M:mKit.Volume.LoadCachedFile(System.String)">
            <summary>
            Load a volume already present in the application [experimental]. 
            Note: The Vm2 instance of the loaded volume is shared with another volume slot.
            Note: another caching method is used if <see cref="F:mKit.Config.TransparentVolumeDataCaching"/> is true. 
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:mKit.Volume.GetCacheIndex(System.String)">
            <summary>
            Get volume cache index by filename.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetCacheIndex(mKit.TextureData)">
            <summary>
            Get volume cache index by <see cref="T:mKit.TextureData"/> instance.
            </summary>
            <param name="textureData"></param>
            <returns></returns>
        </member>
        <member name="P:mKit.Volume.IsCacheHit">
            <summary>
            Returns true if volume textures were re-used for this instance.
            Cp. <see cref="F:mKit.Config.TransparentVolumeDataCaching"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.IsESSfromDisk">
            <summary>
            True if ESS texture was loaded from disk, false for generated or modified data.
            Set in <see cref="M:mKit.Volume.LoadFile(System.String,mKit.Volume.OnVolumeReadyDelegate)"/>, 
            <see cref="M:mKit.Volume.GenerateVm2(mKit.Vm2Header,mKit.Vm2.GenerateVm2Data,mKit.Volume.OnVolumeReadyDelegate,System.Boolean,System.Boolean)"/>,
            <see cref="M:mKit.Volume.EditVm2(mKit.Vm2.GenerateVm2Data,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.IsVm2fromDisk">
            <summary>
            True if the Vm2 data was loaded from disk,
            false if it was generated or edited.
            </summary>
        </member>
        <member name="M:mKit.Volume.GetFileFromCache(System.Int32)">
            <summary>
            Init with cached Vm2 data.
            </summary>
            <param name="cacheIndex"></param>
        </member>
        <member name="M:mKit.Volume.WaitForCachedVolumeTexture(mKit.Volume.VolumeCacheItem)">
            <summary>
            Wait for texture generation of a Vm2 cache hit and then notify of the texture.
            </summary>
            <param name="cacheItem"></param>
            <returns>nothing</returns>
        </member>
        <member name="M:mKit.Volume.LoadFileESS(System.String,System.String,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Load a volume file asynchronously. 
            An optional delegate parameter can be supplied which is executed when loading has finished.
            If loading of other volume data is already in progess, a waiting Coroutine is started to queue the request. 
            To let classes get volume state events, these can implement the interface <see cref="T:mKit.Events.VolumeStateObserver"/>.
            </summary>
            <param name="filename">Vm2 filename</param>
            <param name="filenameESS">Vm2's empty-space-skipping (ESS) texture filename</param>
            <param name="onVolumeReadyDelegate">delegate executed when loading has finished(default:null)</param>
        </member>
        <member name="M:mKit.Volume.LoadFile_CR(System.String,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Coroutine which calls <see cref="M:mKit.Volume.LoadFile(System.String,mKit.Volume.OnVolumeReadyDelegate)"/> and waits for <see cref="P:mKit.Volume.VolumeState"/> to be READY.
            </summary>
            <param name="filename"></param>
            <param name="onVolumeReadyDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.LoadFile(System.String,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Load a volume file asynchronously. 
            An optional delegate parameter can be supplied which is executed when loading has finished.
            If loading of other volume data is already in progess, a waiting Coroutine is started to queue the request. 
            To let classes get volume state events, these can implement the interface <see cref="T:mKit.Events.VolumeStateObserver"/>.
            </summary>
            <param name="filename">VM2 filename</param>
            <param name="onVolumeReadyDelegate">delegate executed when loading has finished(default:null)</param>
        </member>
        <member name="M:mKit.Volume.Coroutine_EditVm2(mKit.Vm2.GenerateVm2Data,System.Boolean)">
            <summary>
            Edit a volume's Vm2 data (Coroutine).
            </summary>
            <param name="editDataDelegate"></param>
            <param name="generateTexture"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.CopyGpuDataFrom(mKit.Volume,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Quaternion,System.Boolean,mKit.Volume.OnVolumeReadyDelegate,System.Int32,System.Int32)">
            <summary>
            Copy GPU data from another volume into GPU memory of this instance.
            </summary>
            <param name="src">source volume for the copy operation</param>
            <param name="srcCenter"></param>
            <param name="srcSize"></param>
            <param name="dstCenter"></param>
            <param name="dstSize"></param>
            <param name="dstRotation"></param>
            <param name="updateVm2">if true, changed gpu data will be copied back to Vm2 host memory</param>
            <param name="srcPhase">source phase for multi-phase volumes (default: 0)</param>
            <param name="dstPhase">destination phase for multi-phase volumes (default: 0)</param>
            <param name="readyCallback"></param>
        </member>
        <member name="M:mKit.Volume.CopyGpuDataFrom_Coroutine(mKit.Volume,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Quaternion,System.Boolean,mKit.Volume.OnVolumeReadyDelegate,System.Int32,System.Int32)">
            <summary>
            Coroutine started by <see cref="M:mKit.Volume.CopyGpuDataFrom(mKit.Volume,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Quaternion,System.Boolean,mKit.Volume.OnVolumeReadyDelegate,System.Int32,System.Int32)"/>
            </summary>
            <param name="src"></param>
            <param name="srcCenter"></param>
            <param name="srcSize"></param>
            <param name="dstCenter"></param>
            <param name="dstSize"></param>
            <param name="dstRotation"></param>
            <param name="updateVm2"></param>
            <param name="srcPhase"></param>
            <param name="dstPhase"></param>
            <param name="readyCallback"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.UpdateEssOnGpu_CR">
            <summary>
            Update ESS data on the GPU.
            </summary>
        </member>
        <member name="M:mKit.Volume.CopyGpuDataToVm2(System.Collections.Generic.List{UnityEngine.Texture},System.Int32)">
            <summary>
            Copy GPU to VM2 host memory. 
            </summary>
            <param name="volumePhase"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.CloneFromCache(mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Clone a new volume from this instance.
            Only available with <see cref="F:mKit.Config.TransparentVolumeDataCaching"/> enabled.
            </summary>
            <param name="cloneOnVolumeReadyDelegate">delegate to be called after loading</param>
            <returns>instance with cached volume textures</returns>
        </member>
        <member name="M:mKit.Volume.LoadDirectory(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Add all volume files per <see cref="M:mKit.Volume.AddVolume(System.String,mKit.Volume.OnVolumeReadyDelegate)"/>from a filesystem directory.
            </summary>
            <param name="directory">directory path</param>
            <param name="searchOption"></param>
            <param name="adjustMaxVolumes">set to true to auto-configure <see cref="F:mKit.Config.MaxConcurrentVolumes"/></param>
        </member>
        <member name="M:mKit.Volume.FindAppComponents">
            <summary>
            Find instances implementing the interface <see cref="T:mKit.ImApplicationComponent"/>.
            </summary>
            <returns>List</returns>
        </member>
        <member name="M:mKit.Volume.AddVolumeCoroutine(System.String,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Coroutine which calls <see cref="M:mKit.Volume.AddVolume(System.String,mKit.Volume.OnVolumeReadyDelegate)"/> and waits for <see cref="P:mKit.Volume.VolumeState"/> to be READY.
            </summary>
            <param name="filename"></param>
            <param name="onVolumeReadyDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.AddVolume(System.String,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Add a volume asynchronously to the scene. 
            An optional delegate parameter can be supplied which is executed when loading has finished.
            The maximum of concurrent volumes in the scene is defined in <see cref="F:mKit.Config.MaxConcurrentVolumes"/>.
            </summary>
            <param name="filename"></param>
            <param name="onVolumeReadyDelegate"></param>
            <returns>instance of <see cref="T:mKit.Volume"/>.</returns>
        </member>
        <member name="M:mKit.Volume.AddVolumeFromTextures(mKit.TextureData,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Add a volume from a texture asset (corresponding to a filename)
            </summary>
            <param name="filename"></param>
            <param name="texture"></param>
            <param name="ess"></param>
            <param name="onVolumeReadyDelegate"></param>
        </member>
        <member name="M:mKit.Volume.AddGeneratedShapes(System.String,mKit.Vm2Header,System.Collections.Generic.List{mKit.ShapeConfig},mKit.Volume.OnVolumeReadyDelegate,System.Boolean)">
            <summary>
            Generate a procedural volume from a <see cref="T:mKit.ShapeConfigVoxel"/> list.
            </summary>
            <param name="filename"></param>
            <param name="header"></param>
            <param name="shapeConfigList"></param>
            <param name="onVolumeReadyDelegate"></param>
            <param name="generateTexture"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.AddGeneratedVolume(System.String,mKit.Vm2Header,mKit.Vm2.GenerateVm2Data,mKit.Volume.OnVolumeReadyDelegate,System.Boolean,System.Boolean)">
            <summary>
            Generate a procedural volume.
            </summary>
            <param name="filename">filename</param>
            <param name="header">Vm2 header</param>
            <param name="generateData">delegate for procedural volume generation</param>
            <param name="onVolumeReadyDelegate">delegate called on finish generating"/></param>
            <param name="generateTexture">if true a GPU texture is created automatically</param>
            <param name="allocateHostMemory">if false, no host memory is allocated</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.AddGeneratedShapesGPU(System.String,mKit.Vm2Header,System.Collections.Generic.List{mKit.ShapeConfig},mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Generate volume shapes with a ComputeShader.
            </summary>
            <param name="filename"></param>
            <param name="header"></param>
            <param name="shapeConfigList"></param>
            <param name="onVolumeReadyDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GenerateShapesGPU(System.String,mKit.Vm2Header,System.Collections.Generic.List{mKit.ShapeConfig},mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Generate volume shapes with a ComputeShader.
            </summary>
            <param name="filename"></param>
            <param name="header"></param>
            <param name="shapeConfigList"></param>
            <param name="onVolumeReadyDelegate"></param>
        </member>
        <member name="P:mKit.Volume.GenerateOnGpuCopyToHost">
            <summary>
            Sets if volume data will not be copied to host memory, e.g. for shapes generated on the GPU. 
            </summary>
        </member>
        <member name="M:mKit.Volume.AddVm2(mKit.Vm2,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Add volume from an Vm2 instance
            </summary>
            <param name="vm2"></param>
            <param name="onVolumeReadyDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.UnloadVolume(System.Int32)">
            <summary>
            Remove a volume from the scene.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:mKit.Volume.UnloadAllVolumes">
            <summary>
            Unloads all currently active volumes
            </summary>
        </member>
        <member name="M:mKit.Volume.UnloadVolume">
            <summary>
            Removes volume from the scene.
            </summary>
        </member>
        <member name="P:mKit.Volume.PreserveActiveState">
            <summary>
            If true, the volume/toolgroup gameobject's activeSelf state stays unaltered upon volume loading
            </summary>
        </member>
        <member name="M:mKit.Volume.PanSlice(System.Single,System.Single)">
            <summary>
            Pans the slice inside the slice's plane (unimplemented).
            </summary>
            <param name="x">x movement (mm)</param>
            <param name="y">y movement (mm)</param>
        </member>
        <member name="P:mKit.Volume.RenderPerCamera">
            <summary>
            If false, <see cref="M:mKit.Volume.VolumeUpdate"/> will be called from <see cref="M:mKit.Volume.LateUpdate"/>.
            If true, <see cref="M:mKit.Volume.VolumeUpdate"/> will additionally be called from <see cref="M:mKit.ProxyGeometry.OnWillRenderObject"/>.
            </summary>
        </member>
        <member name="M:mKit.Volume.Reset">
            <summary>
            Editor message
            </summary>
        </member>
        <member name="M:mKit.Volume.ResetToDefaults">
            <summary>
            Reset or "AutoInit"
            </summary>
        </member>
        <member name="M:mKit.Volume.GetDefaultCompositingMode">
            <summary>
            Returns default compositing mode for current Vm2 format.
            </summary>
            <returns>compositing mode</returns>
        </member>
        <member name="M:mKit.Volume.SaveVm2(System.String,mKit.Vm2SaveOperation.OnFinishDelegate,mKit.Vm2.FormatEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Save volume data to disk in VM2 format. Unless specified otherwise, this is a asynchronous operation.
            Specify a delegate method to do tasks depending upon saving completion.
            ESS (empty-space-skipping) data is saved to a second file with .ess file extension.
            </summary>
            <param name="filename">Vm2 filename. Filename extension will be replaced for ESS files.</param>
            <param name="onFinish">delegate method executed when saving has finished.</param>
            <param name="format">Vm2 format. Set to NONE for keeping current format (default).</param>
            <param name="saveESS">save emtpy-space-skipping data</param>
            <param name="overwrite">set to true to overwerite existing files(default)</param>
            <param name="start">if true, <see cref="M:mKit.Vm2SaveOperation.Start"/>is calle</param>
            <param name="asyncSaving">if true, saving occurs in coroutine</param>
        </member>
        <member name="M:mKit.Volume.HasVm2Section(mKit.Vm2SectionType)">
            <summary>
            Check whether the VM2 instance has additional data sections. 
            </summary>
            <param name="sectionType">section type to query for</param>
            <returns>true, if one or more section entries are present</returns>
        </member>
        <member name="M:mKit.Volume.GetVm2SectionArray``1(mKit.Vm2SectionType,System.UInt32)">
            <summary>
            Get array from VM2.1 data section (generic).
            </summary>
            <typeparam name="T">array type</typeparam>
            <param name="sectionType"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetVm2SectionImpedanceArray(System.UInt32)">
            <summary>
            Get impedance array from VM2.1 data section.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.GetVm2SectionColorLUT(System.UInt32)">
            <summary>
            Get color lookup-table (LUT) from VM2.1 data section.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.SetVm2SectionImpedanceArray(System.Single[])">
            <summary>
            Add an impedance lookup-table (LUT) stored as a float array. 
            Array entries are derived from the unit of specific impedance, kg/(m^2*s), devided by 10^6.
            </summary>
            <param name="impedanceArray"></param>
        </member>
        <member name="M:mKit.Volume.SetVm2SectionColorLUT(UnityEngine.Color[])">
            <summary>
            Add a color lookup-table (LUT).
            For 8-bit volume data, the texture dimensions should be 256x1.
            </summary>
            <param name="colorLUT">color array</param>
        </member>
        <member name="M:mKit.Volume.SetVm2SectionColorLUT(UnityEngine.Color32[])">
            <summary>
            Add a color lookup-table (LUT).
            For 8-bit volume data, the texture dimensions should be 256x1.
            </summary>
            <param name="colorLUT">color array</param>
        </member>
        <member name="M:mKit.Volume.GetVm2Section(System.Int32)">
            <summary>
            Add a impedance lookup-table (LUT) stored as a float array. 
            Array entries are derived from the unit kg/(m^2*s), devided by 10^6.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.SaveESS(System.String,mKit.Vm2SaveOperation.OnFinishDelegate,System.Boolean)">
            <summary>
            Save Vm2 ESS data only.
            </summary>
            <param name="filename">Vm2 Filename. Filename extension will be replaced for ESS files.</param>
            <param name="onFinish">onFinish delegate (default:null)</param>
            <param name="overwrite">set to true to overwerite existing files(default)</param>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.SetClippingAbove(System.Boolean)">
            <summary>
            toggle clipping above 
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:mKit.Volume.SetClippingBelow(System.Boolean)">
            <summary>
            toggle clipping below
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:mKit.Volume.SetCurrentToolActive(System.Boolean)">
            <summary>
            Toggle Toolgroup visibility
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:mKit.Volume.SetClippingMode(mKit.ClipState)">
            <summary>
            Sets the clipping  to enabled 
            </summary>
            <param name="clipState">if set to <c>true</c> [clip state].</param>
        </member>
        <member name="M:mKit.Volume.SetIndicatorPositionNormalized(System.Int32,UnityEngine.Vector2)">
            <summary>
            Sets the indicator position normalized to slice size and relative to slice center. 
            A x or y value of 0.5f or -0.5f sets the indicator position to one edge of the slice.
            </summary>
            <param name="sliceIndex">slice index or -1 for all slices</param>
            <param name="posnorm">Vector with x and y position </param>
        </member>
        <member name="M:mKit.Volume.SetIndicatorShape(System.Int32,mKit.IndicatorShapeEnum,System.Single,UnityEngine.GameObject)">
            <summary>
            Set the indicator shape of the toolgroup slice.
            </summary>
            <param name="sliceIndex">slice index</param>
            <param name="shape">shape</param>
            <param name="scale">uniform scale (-1 for default from <see cref="F:mKit.Config.DefaultIndicatorScale"/>)</param>
            <param name="prefab">custom indicator prefab(not gameobject) (only used for shape CUSTOM)</param>
        </member>
        <member name="M:mKit.Volume.SetIndicatorColor(System.Int32,UnityEngine.Color)">
            <summary>
            Try to pass a color to an material of the indicator hierarchy of the toolgroup.
            If no renderer is found on the hierarchy's top gameobject or its children the function does nothing.
            </summary>
            <param name="sliceIndex">index or -1 for all slices</param>
            <param name="col">color applied to material of indicator root transform</param>
        </member>
        <member name="P:mKit.Volume.SlabThickness">
            <summary>
            Sets slab thickness in millimeters for <see cref="F:mKit.MPR_Type.ThickMPR"/>.
            To activate slab rendering, use the property <see cref="P:mKit.Volume.MPRType"/>.  
            </summary>
            <param name="value">slab thickness in millimeters</param>
        </member>
        <member name="M:mKit.Volume.SetROI(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set a cuboid region-of-interest (ROI) on the volume. Voxels outside the ROI are not rendered.
            The ROI cuboid is here specified by a minimum and a maximum point in meters with regard to the original volume size (any scaling is automacially applied).
            To toggle ROI on or off, use <see cref="P:mKit.Volume.UseROI"/> (default: off).
            </summary>
            <param name="min">minimal point in meters</param>
            <param name="max">maximal point in meters</param>
        </member>
        <member name="P:mKit.Volume.ROImin">
            <summary>
            Get/set the position (in unit meters) nearest from origin for a cuboid region of interest (ROI) on the volume. 
            For more information, <see cref="M:mKit.Volume.SetROI(UnityEngine.Vector3,UnityEngine.Vector3)"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.ROImax">
            <summary>
            Get/set the position (in unit meters) farest from origin for a cuboid region of interest (ROI) on the volume. 
            Voxels outside the ROI are not rendered.
            For more information, <see cref="M:mKit.Volume.SetROI(UnityEngine.Vector3,UnityEngine.Vector3)"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.ROIsize">
            <summary>
            ROI size (meters).
            </summary>
        </member>
        <member name="P:mKit.Volume.ROIcenterOffset">
            <summary>
            Volume data-local offset (meters) from the center of the default sized volume to the partition center of the ROI.
            See also <see cref="P:mKit.Volume.UseROI"/> and <see cref="M:mKit.Volume.SetROI(UnityEngine.Vector3,UnityEngine.Vector3)"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.UseROI">
            <summary>
            Set a cuboid region of interest (ROI) on the volume. 
            Voxels outside the ROI are not rendered.
            For more information, <see cref="M:mKit.Volume.SetROI(UnityEngine.Vector3,UnityEngine.Vector3)"/>.
            </summary>
        </member>
        <member name="M:mKit.Volume.SetSampleRateNormalized(System.Single)">
            <summary>
            Set the normalized sample rate.
            </summary>
            <param name="samplerate">value between 0 and 1</param>
        </member>
        <member name="M:mKit.Volume.SetSecondaryTextureFromVolume(mKit.Volume)">
            <summary>
            Assigns a secondary volume texture from an other active volume.
            </summary>
            <param name="volume"></param>
        </member>
        <member name="P:mKit.Volume.VolumeTexture">
            <summary>
            Returns the Unity texture instance holding volume data.
            </summary>
        </member>
        <member name="P:mKit.Volume.EssTexture">
            <summary>
            Returns the Unity texture used for empty-space-skipping.
            </summary>
        </member>
        <member name="M:mKit.Volume.SetSliceBorderLength(System.Single,System.Single)">
            <summary>
            The normalized slice border length ranges from -0.5f to +0.5f.
            For details, see <see cref="F:mKit.Config.DefaultSliceBorderNormalizedOuterDistance"/>.
            </summary>
            <param name="absoluteOuterDistance"></param>
            <param name="absoluteInnerDistance"></param>
        </member>
        <member name="M:mKit.Volume.SetSliceEdgeColor(UnityEngine.Color,mKit.SliceEdgeEnum,System.Int32)">
            <summary>
            Obsolete: Use SetSliceBorderColor instead
            </summary>
            <param name="col"></param>
            <param name="edge"></param>
            <param name="sliceIndex"></param>
        </member>
        <member name="M:mKit.Volume.SetSliceBorderColor(UnityEngine.Color,mKit.SliceEdgeEnum,System.Int32)">
            <summary>
            Set a color for one or multiple borders of the toolgroup slice(s).
            </summary>
            <param name="col">border color</param>
            <param name="edge">index of the border or SliceEdgeEnum.ALL for all borders.</param>
            <param name="sliceIndex">index of the slice or -1 (default) for all slices.</param>
        </member>
        <member name="M:mKit.Volume.SetShaderDebugFlag(mKit.ShaderDebugFlag)">
            <summary>
            Turns on a debug functions, see <see cref="T:mKit.ShaderDebugFlag"/>.
            </summary>
            <param name="flag">flag index</param>
        </member>
        <member name="M:mKit.Volume.SetToolModel(UnityEngine.GameObject,System.Int32)">
            <summary>
            Sets a gameobject representing a tool's slice handle. To access the corresponding transform use <see cref="M:mKit.Volume.GetToolModelTransform"/>.
            </summary>
            <param name="go"></param>
            <param name="sliceIndex">slice no</param>
        </member>
        <member name="M:mKit.Volume.SetTextureMode(mKit.mKitTextureType,System.Boolean)">
            <summary>
            Sets the texture format the raw data is converted to. The texture will be generated or an already existing texture will be used.
            </summary>
            <param name="mode">texture mode to use. See enumeration <see cref="P:mKit.Volume.TextureMode" /> for details</param>
            <param name="enforce">forces a new converting run even if there was already data converted.</param>
        </member>
        <member name="M:mKit.Volume.SetThresholdNormalized(System.Single)">
            <summary>
            Set the highpass intensity threshold used during volume sampling. 
            </summary>
            <param name="newNormalizedThreshold">The new normalized threshold.</param>
        </member>
        <member name="M:mKit.Volume.GetToolPositionInVolume(System.Int32)">
            <summary>
            Get tool position in local volume coordinates. 
            Coordinates inside the volume range from (-0.5 to +0.5) * <see cref="P:mKit.Volume.VolumeSizeScaled"/>.
            </summary>
            <param name="sliceIndex">toolgroup slice index</param>
            <returns>local position</returns>
        </member>
        <member name="M:mKit.Volume.WorldToVolumePosition(UnityEngine.Vector3)">
            <summary>
            Convert a world position to volume-local coordinates.
            </summary>
            <param name="worldPos">Vector3</param>
            <returns>Vector3</returns>
        </member>
        <member name="M:mKit.Volume.GetToolRotationInVolume(System.Int32)">
            <summary>
            Get tool rotation in local volume coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mKit.Volume.IsToolCenterInVolume(System.Int32)">
            <summary>
            If false, the slice center is outside the volume.
            </summary>
            <param name="sliceIndex">slice index in toolgroup (default: 0)</param>
            <returns>bool</returns>
        </member>
        <member name="M:mKit.Volume.SetToolPositionInVolume(UnityEngine.Vector3,System.Int32,System.Boolean)">
            <summary>
            Sets the slice tool position in volume coordinates.
            Local volume coordinates range from (-0.5 to +0.5) * <see cref="P:mKit.Volume.VolumeSizeScaled"/>.
            </summary>
            <param name="pos"></param>
            <param name="sliceIndex">slice number in toolgroup (default: first)</param>
            <param name="allowOutside">if false, the position will be clamped to a position just inside the volume</param>
        </member>
        <member name="M:mKit.Volume.SetToolRotationInVolume(UnityEngine.Quaternion)">
            <summary>
            Set tool rotation in local volume coordinates.
            </summary>
            <param name="localRotation"></param>
        </member>
        <member name="M:mKit.Volume.SetToolSize(UnityEngine.Vector2)">
            <summary>
            Sets the size for all slices in the tool group.
            Note: volume scaling is applied separately.
            </summary>
            <param name="size2D">x,y dimensions (Unity units)</param>
        </member>
        <member name="M:mKit.Volume.SetToolSliceSize(UnityEngine.Vector2,System.Int32)">
            <summary>
            Set slice size of one slice in the toolgroup.
            </summary>
            <param name="size2D">x,y dimensions</param>
            <param name="index"></param>
        </member>
        <member name="M:mKit.Volume.SetToolZoomNormalized(System.Single)">
            <summary>
            Sets the normalized tool slice size. The slice is set to quadratic form with specified side length. 
            The normlized side length can be between 0.0f which decreases the slice to the allowed minium size (thereby fully "zooming in")
            and a value of 1.0f which increases the slice size to the allowed maxium size (thereby fully "zooming out").  
            </summary>
            <param name="toolSizeNormalized">normalized side length of the quadratic tool slice.</param>
        </member>
        <member name="P:mKit.Volume.SliceCompositingMode">
            <summary>
            Set compositing mode and/or transfer function LUT for slice rendering. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeCompositingMode">
            <summary>
            Set compositing mode for volume rendering. 
            </summary>
        </member>
        <member name="P:mKit.Volume.VolumeCompositingModeUseLabels">
            <summary>
            
            </summary>
        </member>
        <member name="P:mKit.Volume.UseTransferFunction">
            <summary>
            Convenience property to set the usage of a transfer function for both volume and slice. 
            For more information, refer to <see cref="P:mKit.Volume.UseTransferFunctionSlice"/> and <see cref="P:mKit.Volume.UseTransferFunctionVolume"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.UseTransferFunctionVolume">
            <summary>
            If true, only for the volume, voxel values will be used indirectly, in a transfer function, which maps voxel intensities to a color lookup table (LUT).
            </summary>
        </member>
        <member name="P:mKit.Volume.UseTransferFunctionSlice">
            <summary>
            If true, nly for the slice, voxel values will be used indirectly, in a transfer function, which maps voxel intensities to a color lookup table (LUT).
            </summary>
        </member>
        <member name="M:mKit.Volume.SetTransferFunction(mKit.CompositingMode)">
            <summary>
            Set Transfer Function used by Raycast Shader (only for CT or MRI)
            </summary>
            <param name="tf_no">0: Standard alpha blending, 1: MIP, 2: alpha blending + 2D Texture LUT, 3: Custom Blending + 2D Texture LUT</param>
        </member>
        <member name="M:mKit.Volume.SetTransferFunctionTexture(UnityEngine.Texture2D)">
            <summary>
            Sets the 2D Texture used by transfer function no. 3 or 4
            </summary>
            <param name="tex2D">the texture</param>
        </member>
        <member name="M:mKit.Volume.SetVolumeCameraLayerActive(UnityEngine.Camera,System.Int32,System.Boolean)">
            <summary>
            Set a camera's cullingMask to show only a certain volume or volume slice.
            </summary>
            <param name="camera">camera instance</param>
            <param name="volumeIndex">volume index</param>
            <param name="showSlice">true to show the volume slice</param>
        </member>
        <member name="M:mKit.Volume.SetVolumeTransform(UnityEngine.Transform,System.Boolean)">
            <summary>
            Copy volume and toolgroup rotation/position from another tansform. 
            </summary>
            <param name="t">source transform instance</param>
            <param name="onlyVolume">adjust only volume</param>
        </member>
        <member name="M:mKit.Volume.SetWindowLevelNormalized(System.Single)">
            <summary>
            Sets the normalized window level. 
            </summary>
            <param name="level">normalized level (possible range 0.0f - 1.0f)</param>
        </member>
        <member name="M:mKit.Volume.SetWindowWidthNormalized(System.Single)">
            <summary>
            Sets the normalized window width. 
            </summary>
            <param name="width">normalized window width (possible range 0.0f - 1.0f)</param>
        </member>
        <member name="P:mKit.Volume.MPRType">
            <summary>
            Turns the oblique slice into a oblique slab with a defined thickness. To set the thickness, <see cref="P:mKit.Volume.SlabThickness"/>.
            </summary>
        </member>
        <member name="P:mKit.Volume.TimeLerp">
            <summary>
            Set to true to interpolate between phases (4D volumes only).
            </summary>
        </member>
        <member name="M:mKit.Volume.ToggleRendererForTagged(System.String,System.Boolean)">
            <summary>
            Toggle renderer enabled-state for Gameobjects matching a Unity tag
            </summary>
            <param name="tag">the tag string</param>
            <param name="state">on or off</param>
        </member>
        <member name="M:mKit.Volume.ToolSliceTranslateRelative(System.Int32,UnityEngine.Vector3)">
            <summary>
            Move a slice relative to the toolgroup center. Axis setup follows the Unity coordinate system.
            </summary>
            <param name="index">slice no.</param>
            <param name="tr">translation vector. the slice position is adjusted by the x,y,z components.</param>
        </member>
        <member name="M:mKit.Volume.GenerateShapes(System.Collections.Generic.List{mKit.ShapeConfig},mKit.Vm2.FormatEnum,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Construct a Vm2 with a given set of artificial shapes
            </summary>
            <param name="shapeConfigList">The given Config-List</param>
            <param name="vm_format">the format of the volume</param>
            <param name="dataDim">the dimension of the volume-data</param>
            <param name="mmDim">the real mm size of the volume-data</param>
            <param name="generateTexture">set to false for further Vm2 data processing (default:true). See also: <see cref="M:mKit.Volume.GenerateTexture"/> </param>
        </member>
        <member name="M:mKit.Volume.EditVm2AddArtificialShapes(System.Collections.Generic.List{mKit.ShapeConfig},System.Boolean,mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Adds a given set of artificial volumes, which are added to the current Vm2. 
            </summary>
            <param name="shapeConfigList">List with <see cref="T:mKit.ShapeConfigVoxel"/> items</param>
            <param name="generateTexture">set to false for further Vm2 data processing (default:true). See also: <see cref="M:mKit.Volume.GenerateTexture"/> </param>
        </member>
        <member name="M:mKit.Volume.EditGpuAddArtificialShapes(System.Collections.Generic.List{mKit.ShapeConfig},mKit.Volume.OnVolumeReadyDelegate)">
            <summary>
            Edit volume GPU data, adding shapes.
            </summary>
            <param name="shapeConfigList"></param>
            <param name="generateTexture"></param>
            <param name="onVolumeReadyDelegate"></param>
        </member>
        <member name="M:mKit.Volume.EditGpuAddArtificialShapes_Coroutine(System.Collections.Generic.List{mKit.ShapeConfig})">
            <summary>
            Edit volume GPU data, adding shapes (Coroutine)
            </summary>
            <param name="shapeConfigList"></param>
            <param name="generateTexture"></param>
            <param name="onVolumeReadyDelegate"></param>
            <returns></returns>
        </member>
        <member name="P:mKit.Volume.HostMemoryAllocated">
            <summary>
            If false, the volume is possibly generated directly on the GPU. This may occur when <see cref="F:mKit.Config.ShapeGpuGenerationCopyToHost"/> is set to false.
            Experimental: To download GPU data, you can use <see cref="M:mKit.Volume.CopyGpuDataToVm2(System.Collections.Generic.List{UnityEngine.Texture},System.Int32)"/> and set <see cref="P:mKit.Volume.GenerateOnGpuCopyToHost"/> to true.
            </summary>
        </member>
        <member name="M:mKit.Volume.VolumeUpdate">
            <summary>
            Called from <see cref="M:mKit.Volume.LateUpdate"/>, or per Camera render, if <see cref="P:mKit.Volume.RenderPerCamera"/> is enabled.
            </summary>
        </member>
        <member name="T:mKit.VolumeConfig">
            <summary>
            Volume configuration class
            </summary>
        </member>
        <member name="F:mKit.VolumeConfig.volumeType">
            <summary>
            Volume type
            </summary>
        </member>
        <member name="F:mKit.VolumeConfig.windowPreset">
            <summary>
            Window preset
            </summary>
        </member>
        <member name="T:mKit.VolumeCube">
            <summary>
            This component complements the volume rendering setup using a cube mesh and a volume shader. Based on <see cref="T:mKit.ProxyGeometry"/> component.
            </summary>
        </member>
        <member name="M:mKit.VolumeCube.Init(mKit.Volume)">
            <summary>
            Init volume cube with new volume data.
            </summary>
            <param name="volumeControl"></param>
        </member>
        <member name="M:mKit.VolumeCube.ModifyMesh(mKit.RenderOptions)">
            <summary>
            Modify normalized mesh vertices for ROI 
            </summary>
            <param name="ro"></param>
        </member>
        <member name="T:mKit.PresentationParameters">
            <summary>
            Parameters related to image presentation: window level, window width, threshold and transfer function.
            These parameters are passed to the GPU shader.
            </summary>
        </member>
        <member name="F:mKit.PresentationParameters.windowLevelVolume">
            window center
        </member>
        <member name="F:mKit.PresentationParameters.windowWidthVolume">
            window width
        </member>
        <member name="F:mKit.PresentationParameters.threshold">
            high pass threshold for volume sample values
        </member>
        <member name="F:mKit.PresentationParameters.volumeCompositingMode">
            compositing
        </member>
        <member name="F:mKit.PresentationParameters.transferFunctionTextureSlice">
            texture for texture compositing modes
        </member>
        <member name="M:mKit.PresentationParameters.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:mKit.PresentationParameters.Reset(System.Boolean)">
            <summary>
            Reset parameters to defaults from <see cref="T:mKit.Config"/>.
            </summary>
            <param name="notify"></param>
        </member>
        <member name="T:CustomInput.AbstractDevice">
            <summary>
            Basic methods for devices
            </summary>
        </member>
        <member name="T:CustomInput.DeviceRegistry">
            <summary>
            Basic methods for a device registry
            </summary>
        </member>
        <member name="T:CustomInput.BasicDevice">
            <summary>
            Base class for custom input devices. Custom Input Devices should inherit from this class. Implements <see cref="T:CustomInput.AbstractDevice"/> Interface.
            <seealso cref="T:CustomInput.AbstractDevice" />
            </summary>
        </member>
        <member name="T:Lib.PerlinNoise">
            <summary>
            Perlin noise generator. 
            cp. https://docs.unity3d.com/ScriptReference/Mathf.PerlinNoise.html
            </summary>
        </member>
        <member name="T:Vm2ProcedureAsync">
            <summary>
            Execute procedural generation or editing of VM2 data. 
            </summary>
        </member>
        <member name="M:Vm2ProcedureAsync.#ctor(mKit.Vm2,mKit.Vm2.GenerateVm2Data)">
            <summary>
            Procedural generation / editing of VM2 data. 
            Using System.ComponentModel.BackgroundWorker for running as background thread.
            </summary>
            <param name="_vm2"></param>
            <param name="_stream"></param>
            <param name="_blockSize"></param>
        </member>
        <member name="P:Vm2ProcedureAsync.Completed">
            <summary>
            Task state. Uses locking to account for multi-threaded access.
            </summary>
        </member>
    </members>
</doc>
